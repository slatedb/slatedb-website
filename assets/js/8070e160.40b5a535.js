"use strict";(self.webpackChunkslatedb_website=self.webpackChunkslatedb_website||[]).push([[822],{4143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"quickstart","title":"Quickstart","description":"SlateDB is a Rust library. It doesn\'t currently ship with any language bindings, so you must use Rust or generate your own bindings.","source":"@site/docs/quickstart.md","sourceDirName":".","slug":"/quickstart","permalink":"/docs/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/slatedb/slatedb-website/tree/main/docs/quickstart.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/docs/introduction"},"next":{"title":"Connect SlateDB to Azure Blob Storage","permalink":"/docs/tutorials/abs"}}');var o=n(4848),r=n(8453);const a={sidebar_position:2},i="Quickstart",c={},l=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"quickstart",children:"Quickstart"})}),"\n",(0,o.jsx)(t.p,{children:"SlateDB is a Rust library. It doesn't currently ship with any language bindings, so you must use Rust or generate your own bindings."}),"\n",(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.p,{children:["Add the following to your ",(0,o.jsx)(t.code,{children:"Cargo.toml"})," to use SlateDB:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-toml",children:'[dependencies]\nslatedb = "*"\n'})}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(t.p,{children:["SlateDB uses ",(0,o.jsx)(t.a,{href:"https://crates.io/crates/tokio",children:(0,o.jsx)(t.code,{children:"tokio"})})," as its async runtime and ",(0,o.jsx)(t.a,{href:"https://docs.rs/object_store/latest/object_store/",children:(0,o.jsx)(t.code,{children:"object_store"})})," to interact with object storage. The code below shows a simple in-memory example."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-rust",children:'use bytes::Bytes;\nuse object_store::{ObjectStore, memory::InMemory, path::Path};\nuse slatedb::db::Db;\nuse slatedb::config::DbOptions;\nuse std::sync::Arc;\n\n#[tokio::main]\nasync fn main() {\n    // Setup\n    let object_store: Arc<dyn ObjectStore> = Arc::new(InMemory::new());\n    let options = DbOptions::default();\n    let kv_store = Db::open_with_opts(\n        Path::from("/tmp/test_kv_store"),\n        options,\n        object_store,\n    )\n    .await\n    .unwrap();\n\n    // Put\n    let key = b"test_key";\n    let value = b"test_value";\n    kv_store.put(key, value).await;\n\n    // Get\n    assert_eq!(\n        kv_store.get(key).await.unwrap(),\n        Some(Bytes::from_static(value))\n    );\n\n    // Delete\n    kv_store.delete(key).await;\n    assert!(kv_store.get(key).await.unwrap().is_none());\n\n    // Close\n    kv_store.close().await.unwrap();\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);