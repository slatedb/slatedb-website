<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1414" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1397.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1397.00"> </text><svg id="frames" x="10" width="1180" total_samples="718"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.28%)</title><rect x="0.0000%" y="645" width="0.2786%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2 samples, 0.28%)</title><rect x="0.0000%" y="629" width="0.2786%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.28%)</title><rect x="0.0000%" y="613" width="0.2786%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.28%)</title><rect x="0.0000%" y="597" width="0.2786%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.14%)</title><rect x="0.1393%" y="581" width="0.1393%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3893%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.56%)</title><rect x="0.0000%" y="661" width="0.5571%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::write (2 samples, 0.28%)</title><rect x="0.2786%" y="645" width="0.2786%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="2"/><text x="0.5286%" y="655.50"></text></g><g><title>slatedb::batch::WriteBatch::put_with_options (9 samples, 1.25%)</title><rect x="0.0000%" y="677" width="1.2535%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="9"/><text x="0.2500%" y="687.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (5 samples, 0.70%)</title><rect x="0.5571%" y="661" width="0.6964%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="5"/><text x="0.8071%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.70%)</title><rect x="0.5571%" y="645" width="0.6964%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="5"/><text x="0.8071%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.70%)</title><rect x="0.5571%" y="629" width="0.6964%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="5"/><text x="0.8071%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.70%)</title><rect x="0.5571%" y="613" width="0.6964%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="5"/><text x="0.8071%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.70%)</title><rect x="0.5571%" y="597" width="0.6964%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="5"/><text x="0.8071%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.70%)</title><rect x="0.5571%" y="581" width="0.6964%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="5"/><text x="0.8071%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.70%)</title><rect x="0.5571%" y="565" width="0.6964%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="5"/><text x="0.8071%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5 samples, 0.70%)</title><rect x="0.5571%" y="549" width="0.6964%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="5"/><text x="0.8071%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5 samples, 0.70%)</title><rect x="0.5571%" y="533" width="0.6964%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="5"/><text x="0.8071%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.70%)</title><rect x="0.5571%" y="517" width="0.6964%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="5"/><text x="0.8071%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.70%)</title><rect x="0.5571%" y="501" width="0.6964%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="5"/><text x="0.8071%" y="511.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.70%)</title><rect x="0.5571%" y="485" width="0.6964%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="5"/><text x="0.8071%" y="495.50"></text></g><g><title>__rdl_alloc (5 samples, 0.70%)</title><rect x="0.5571%" y="469" width="0.6964%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="5"/><text x="0.8071%" y="479.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.70%)</title><rect x="0.5571%" y="453" width="0.6964%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="5"/><text x="0.8071%" y="463.50"></text></g><g><title>__libc_malloc (5 samples, 0.70%)</title><rect x="0.5571%" y="437" width="0.6964%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="5"/><text x="0.8071%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::result::Result&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;,slatedb::error::SlateDBError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.14%)</title><rect x="1.2535%" y="629" width="0.1393%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="1.5035%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::result::Result&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;,slatedb::error::SlateDBError&gt;&gt;&gt;&gt; (1 samples, 0.14%)</title><rect x="1.2535%" y="613" width="0.1393%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="1.5035%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="1.2535%" y="597" width="0.1393%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="1.5035%" y="607.50"></text></g><g><title>cfree (1 samples, 0.14%)</title><rect x="1.2535%" y="581" width="0.1393%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="1.5035%" y="591.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.28%)</title><rect x="1.2535%" y="645" width="0.2786%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="2"/><text x="1.5035%" y="655.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (1 samples, 0.14%)</title><rect x="1.3928%" y="629" width="0.1393%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="1.6428%" y="639.50"></text></g><g><title>tokio::sync::oneshot::State::load (1 samples, 0.14%)</title><rect x="1.3928%" y="613" width="0.1393%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="1.6428%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.14%)</title><rect x="1.3928%" y="597" width="0.1393%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="1.6428%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.14%)</title><rect x="1.3928%" y="581" width="0.1393%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="1.6428%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;&gt; (4 samples, 0.56%)</title><rect x="1.5320%" y="645" width="0.5571%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="4"/><text x="1.7820%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.56%)</title><rect x="1.5320%" y="629" width="0.5571%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="4"/><text x="1.7820%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4 samples, 0.56%)</title><rect x="1.5320%" y="613" width="0.5571%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="4"/><text x="1.7820%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (4 samples, 0.56%)</title><rect x="1.5320%" y="597" width="0.5571%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="4"/><text x="1.7820%" y="607.50"></text></g><g><title>slatedb::db::DbInner::check_error (1 samples, 0.14%)</title><rect x="2.0891%" y="645" width="0.1393%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="1"/><text x="2.3391%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;parking_lot::raw_rwlock::RawRwLock,slatedb::db_state::DbState&gt;&gt; (1 samples, 0.14%)</title><rect x="2.0891%" y="629" width="0.1393%" height="15" fill="rgb(245,192,40)" fg:x="15" fg:w="1"/><text x="2.3391%" y="639.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="2.0891%" y="613" width="0.1393%" height="15" fill="rgb(238,167,29)" fg:x="15" fg:w="1"/><text x="2.3391%" y="623.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (1 samples, 0.14%)</title><rect x="2.0891%" y="597" width="0.1393%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="2.3391%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.14%)</title><rect x="2.0891%" y="581" width="0.1393%" height="15" fill="rgb(231,60,39)" fg:x="15" fg:w="1"/><text x="2.3391%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.14%)</title><rect x="2.0891%" y="565" width="0.1393%" height="15" fill="rgb(208,69,12)" fg:x="15" fg:w="1"/><text x="2.3391%" y="575.50"></text></g><g><title>syscall (61 samples, 8.50%)</title><rect x="2.5070%" y="437" width="8.4958%" height="15" fill="rgb(235,93,37)" fg:x="18" fg:w="61"/><text x="2.7570%" y="447.50">syscall</text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (2 samples, 0.28%)</title><rect x="11.0028%" y="437" width="0.2786%" height="15" fill="rgb(213,116,39)" fg:x="79" fg:w="2"/><text x="11.2528%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (2 samples, 0.28%)</title><rect x="11.0028%" y="421" width="0.2786%" height="15" fill="rgb(222,207,29)" fg:x="79" fg:w="2"/><text x="11.2528%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.28%)</title><rect x="11.0028%" y="405" width="0.2786%" height="15" fill="rgb(206,96,30)" fg:x="79" fg:w="2"/><text x="11.2528%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.28%)</title><rect x="11.0028%" y="389" width="0.2786%" height="15" fill="rgb(218,138,4)" fg:x="79" fg:w="2"/><text x="11.2528%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (2 samples, 0.28%)</title><rect x="11.2813%" y="405" width="0.2786%" height="15" fill="rgb(250,191,14)" fg:x="81" fg:w="2"/><text x="11.5313%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.28%)</title><rect x="11.2813%" y="389" width="0.2786%" height="15" fill="rgb(239,60,40)" fg:x="81" fg:w="2"/><text x="11.5313%" y="399.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (76 samples, 10.58%)</title><rect x="2.2284%" y="629" width="10.5850%" height="15" fill="rgb(206,27,48)" fg:x="16" fg:w="76"/><text x="2.4784%" y="639.50">tokio::sync::mp..</text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (76 samples, 10.58%)</title><rect x="2.2284%" y="613" width="10.5850%" height="15" fill="rgb(225,35,8)" fg:x="16" fg:w="76"/><text x="2.4784%" y="623.50">tokio::sync::mp..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (76 samples, 10.58%)</title><rect x="2.2284%" y="597" width="10.5850%" height="15" fill="rgb(250,213,24)" fg:x="16" fg:w="76"/><text x="2.4784%" y="607.50">tokio::sync::ta..</text></g><g><title>core::task::wake::Waker::wake (76 samples, 10.58%)</title><rect x="2.2284%" y="581" width="10.5850%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="76"/><text x="2.4784%" y="591.50">core::task::wak..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (76 samples, 10.58%)</title><rect x="2.2284%" y="565" width="10.5850%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="76"/><text x="2.4784%" y="575.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (76 samples, 10.58%)</title><rect x="2.2284%" y="549" width="10.5850%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="76"/><text x="2.4784%" y="559.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (76 samples, 10.58%)</title><rect x="2.2284%" y="533" width="10.5850%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="76"/><text x="2.4784%" y="543.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::schedule (75 samples, 10.45%)</title><rect x="2.3677%" y="517" width="10.4457%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="75"/><text x="2.6177%" y="527.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (75 samples, 10.45%)</title><rect x="2.3677%" y="501" width="10.4457%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="75"/><text x="2.6177%" y="511.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (75 samples, 10.45%)</title><rect x="2.3677%" y="485" width="10.4457%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="75"/><text x="2.6177%" y="495.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (75 samples, 10.45%)</title><rect x="2.3677%" y="469" width="10.4457%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="75"/><text x="2.6177%" y="479.50">tokio::runtime:..</text></g><g><title>tokio::runtime::context::with_scheduler (75 samples, 10.45%)</title><rect x="2.3677%" y="453" width="10.4457%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="75"/><text x="2.6177%" y="463.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (11 samples, 1.53%)</title><rect x="11.2813%" y="437" width="1.5320%" height="15" fill="rgb(221,10,30)" fg:x="81" fg:w="11"/><text x="11.5313%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (11 samples, 1.53%)</title><rect x="11.2813%" y="421" width="1.5320%" height="15" fill="rgb(210,229,1)" fg:x="81" fg:w="11"/><text x="11.5313%" y="431.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (9 samples, 1.25%)</title><rect x="11.5599%" y="405" width="1.2535%" height="15" fill="rgb(222,148,37)" fg:x="83" fg:w="9"/><text x="11.8099%" y="415.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (9 samples, 1.25%)</title><rect x="11.5599%" y="389" width="1.2535%" height="15" fill="rgb(234,67,33)" fg:x="83" fg:w="9"/><text x="11.8099%" y="399.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (9 samples, 1.25%)</title><rect x="11.5599%" y="373" width="1.2535%" height="15" fill="rgb(247,98,35)" fg:x="83" fg:w="9"/><text x="11.8099%" y="383.50"></text></g><g><title>mio::waker::Waker::wake (9 samples, 1.25%)</title><rect x="11.5599%" y="357" width="1.2535%" height="15" fill="rgb(247,138,52)" fg:x="83" fg:w="9"/><text x="11.8099%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (9 samples, 1.25%)</title><rect x="11.5599%" y="341" width="1.2535%" height="15" fill="rgb(213,79,30)" fg:x="83" fg:w="9"/><text x="11.8099%" y="351.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (9 samples, 1.25%)</title><rect x="11.5599%" y="325" width="1.2535%" height="15" fill="rgb(246,177,23)" fg:x="83" fg:w="9"/><text x="11.8099%" y="335.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (9 samples, 1.25%)</title><rect x="11.5599%" y="309" width="1.2535%" height="15" fill="rgb(230,62,27)" fg:x="83" fg:w="9"/><text x="11.8099%" y="319.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (9 samples, 1.25%)</title><rect x="11.5599%" y="293" width="1.2535%" height="15" fill="rgb(216,154,8)" fg:x="83" fg:w="9"/><text x="11.8099%" y="303.50"></text></g><g><title>write (9 samples, 1.25%)</title><rect x="11.5599%" y="277" width="1.2535%" height="15" fill="rgb(244,35,45)" fg:x="83" fg:w="9"/><text x="11.8099%" y="287.50"></text></g><g><title>tokio::runtime::coop::budget (96 samples, 13.37%)</title><rect x="0.0000%" y="773" width="13.3705%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="96"/><text x="0.2500%" y="783.50">tokio::runtime::coop..</text></g><g><title>tokio::runtime::coop::with_budget (96 samples, 13.37%)</title><rect x="0.0000%" y="757" width="13.3705%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="96"/><text x="0.2500%" y="767.50">tokio::runtime::coop..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (96 samples, 13.37%)</title><rect x="0.0000%" y="741" width="13.3705%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="96"/><text x="0.2500%" y="751.50">tokio::runtime::park..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (96 samples, 13.37%)</title><rect x="0.0000%" y="725" width="13.3705%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="96"/><text x="0.2500%" y="735.50">criterion::bencher::..</text></g><g><title>db_operations::criterion_benchmark::{{closure}}::{{closure}}::{{closure}} (96 samples, 13.37%)</title><rect x="0.0000%" y="709" width="13.3705%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="96"/><text x="0.2500%" y="719.50">db_operations::crite..</text></g><g><title>slatedb::db::Db::put_with_options::{{closure}} (96 samples, 13.37%)</title><rect x="0.0000%" y="693" width="13.3705%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="96"/><text x="0.2500%" y="703.50">slatedb::db::Db::put..</text></g><g><title>slatedb::db::Db::write_with_options::{{closure}} (87 samples, 12.12%)</title><rect x="1.2535%" y="677" width="12.1170%" height="15" fill="rgb(236,212,23)" fg:x="9" fg:w="87"/><text x="1.5035%" y="687.50">slatedb::db::Db::w..</text></g><g><title>slatedb::db::DbInner::write_with_options::{{closure}} (87 samples, 12.12%)</title><rect x="1.2535%" y="661" width="12.1170%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="87"/><text x="1.5035%" y="671.50">slatedb::db::DbInn..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (80 samples, 11.14%)</title><rect x="2.2284%" y="645" width="11.1421%" height="15" fill="rgb(211,96,35)" fg:x="16" fg:w="80"/><text x="2.4784%" y="655.50">tokio::sync::mps..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::inc_num_messages (4 samples, 0.56%)</title><rect x="12.8134%" y="629" width="0.5571%" height="15" fill="rgb(253,215,40)" fg:x="92" fg:w="4"/><text x="13.0634%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.56%)</title><rect x="12.8134%" y="613" width="0.5571%" height="15" fill="rgb(211,81,21)" fg:x="92" fg:w="4"/><text x="13.0634%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.56%)</title><rect x="12.8134%" y="597" width="0.5571%" height="15" fill="rgb(208,190,38)" fg:x="92" fg:w="4"/><text x="13.0634%" y="607.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (187 samples, 26.04%)</title><rect x="0.0000%" y="1141" width="26.0446%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1151.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (187 samples, 26.04%)</title><rect x="0.0000%" y="1125" width="26.0446%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1135.50">core::iter::traits::iterator::Iterator::co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (187 samples, 26.04%)</title><rect x="0.0000%" y="1109" width="26.0446%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1119.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (187 samples, 26.04%)</title><rect x="0.0000%" y="1093" width="26.0446%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1103.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (187 samples, 26.04%)</title><rect x="0.0000%" y="1077" width="26.0446%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1087.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (187 samples, 26.04%)</title><rect x="0.0000%" y="1061" width="26.0446%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1071.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (187 samples, 26.04%)</title><rect x="0.0000%" y="1045" width="26.0446%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1055.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (187 samples, 26.04%)</title><rect x="0.0000%" y="1029" width="26.0446%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1039.50">core::iter::traits::iterator::Iterator::fo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (187 samples, 26.04%)</title><rect x="0.0000%" y="1013" width="26.0446%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1023.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (187 samples, 26.04%)</title><rect x="0.0000%" y="997" width="26.0446%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="187"/><text x="0.2500%" y="1007.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter:..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (187 samples, 26.04%)</title><rect x="0.0000%" y="981" width="26.0446%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="187"/><text x="0.2500%" y="991.50">core::iter::adapters::map::map_fold::{{clo..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (187 samples, 26.04%)</title><rect x="0.0000%" y="965" width="26.0446%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="187"/><text x="0.2500%" y="975.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (187 samples, 26.04%)</title><rect x="0.0000%" y="949" width="26.0446%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="187"/><text x="0.2500%" y="959.50">criterion::benchmark_group::BenchmarkGroup..</text></g><g><title>db_operations::criterion_benchmark::{{closure}} (187 samples, 26.04%)</title><rect x="0.0000%" y="933" width="26.0446%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="187"/><text x="0.2500%" y="943.50">db_operations::criterion_benchmark::{{clos..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (187 samples, 26.04%)</title><rect x="0.0000%" y="917" width="26.0446%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="187"/><text x="0.2500%" y="927.50">criterion::bencher::AsyncBencher&lt;A,M&gt;::iter</text></g><g><title>&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (187 samples, 26.04%)</title><rect x="0.0000%" y="901" width="26.0446%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="187"/><text x="0.2500%" y="911.50">&lt;&amp;tokio::runtime::runtime::Runtime as crit..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (187 samples, 26.04%)</title><rect x="0.0000%" y="885" width="26.0446%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="187"/><text x="0.2500%" y="895.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (187 samples, 26.04%)</title><rect x="0.0000%" y="869" width="26.0446%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="187"/><text x="0.2500%" y="879.50">tokio::runtime::runtime::Runtime::block_on..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (187 samples, 26.04%)</title><rect x="0.0000%" y="853" width="26.0446%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="187"/><text x="0.2500%" y="863.50">tokio::runtime::scheduler::multi_thread::M..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (187 samples, 26.04%)</title><rect x="0.0000%" y="837" width="26.0446%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="187"/><text x="0.2500%" y="847.50">tokio::runtime::context::runtime::enter_ru..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (187 samples, 26.04%)</title><rect x="0.0000%" y="821" width="26.0446%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="187"/><text x="0.2500%" y="831.50">tokio::runtime::scheduler::multi_thread::M..</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (187 samples, 26.04%)</title><rect x="0.0000%" y="805" width="26.0446%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="187"/><text x="0.2500%" y="815.50">tokio::runtime::context::blocking::Blockin..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (187 samples, 26.04%)</title><rect x="0.0000%" y="789" width="26.0446%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="187"/><text x="0.2500%" y="799.50">tokio::runtime::park::CachedParkThread::bl..</text></g><g><title>tokio::runtime::park::CachedParkThread::park (91 samples, 12.67%)</title><rect x="13.3705%" y="773" width="12.6741%" height="15" fill="rgb(244,5,23)" fg:x="96" fg:w="91"/><text x="13.6205%" y="783.50">tokio::runtime::par..</text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (91 samples, 12.67%)</title><rect x="13.3705%" y="757" width="12.6741%" height="15" fill="rgb(226,81,46)" fg:x="96" fg:w="91"/><text x="13.6205%" y="767.50">tokio::runtime::par..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (91 samples, 12.67%)</title><rect x="13.3705%" y="741" width="12.6741%" height="15" fill="rgb(247,70,30)" fg:x="96" fg:w="91"/><text x="13.6205%" y="751.50">std::thread::local:..</text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (91 samples, 12.67%)</title><rect x="13.3705%" y="725" width="12.6741%" height="15" fill="rgb(212,68,19)" fg:x="96" fg:w="91"/><text x="13.6205%" y="735.50">tokio::runtime::par..</text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (91 samples, 12.67%)</title><rect x="13.3705%" y="709" width="12.6741%" height="15" fill="rgb(240,187,13)" fg:x="96" fg:w="91"/><text x="13.6205%" y="719.50">tokio::runtime::par..</text></g><g><title>tokio::runtime::park::Inner::park (91 samples, 12.67%)</title><rect x="13.3705%" y="693" width="12.6741%" height="15" fill="rgb(223,113,26)" fg:x="96" fg:w="91"/><text x="13.6205%" y="703.50">tokio::runtime::par..</text></g><g><title>std::sync::condvar::Condvar::wait (91 samples, 12.67%)</title><rect x="13.3705%" y="677" width="12.6741%" height="15" fill="rgb(206,192,2)" fg:x="96" fg:w="91"/><text x="13.6205%" y="687.50">std::sync::condvar:..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (91 samples, 12.67%)</title><rect x="13.3705%" y="661" width="12.6741%" height="15" fill="rgb(241,108,4)" fg:x="96" fg:w="91"/><text x="13.6205%" y="671.50">std::sys::sync::con..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (91 samples, 12.67%)</title><rect x="13.3705%" y="645" width="12.6741%" height="15" fill="rgb(247,173,49)" fg:x="96" fg:w="91"/><text x="13.6205%" y="655.50">std::sys::sync::con..</text></g><g><title>std::sys::pal::unix::futex::futex_wait (91 samples, 12.67%)</title><rect x="13.3705%" y="629" width="12.6741%" height="15" fill="rgb(224,114,35)" fg:x="96" fg:w="91"/><text x="13.6205%" y="639.50">std::sys::pal::unix..</text></g><g><title>syscall (85 samples, 11.84%)</title><rect x="14.2061%" y="613" width="11.8384%" height="15" fill="rgb(245,159,27)" fg:x="102" fg:w="85"/><text x="14.4561%" y="623.50">syscall</text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.14%)</title><rect x="26.0446%" y="821" width="0.1393%" height="15" fill="rgb(245,172,44)" fg:x="187" fg:w="1"/><text x="26.2946%" y="831.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (1 samples, 0.14%)</title><rect x="26.0446%" y="805" width="0.1393%" height="15" fill="rgb(236,23,11)" fg:x="187" fg:w="1"/><text x="26.2946%" y="815.50"></text></g><g><title>tokio::sync::oneshot::State::is_complete (1 samples, 0.14%)</title><rect x="26.0446%" y="789" width="0.1393%" height="15" fill="rgb(205,117,38)" fg:x="187" fg:w="1"/><text x="26.2946%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;&gt; (2 samples, 0.28%)</title><rect x="26.1838%" y="821" width="0.2786%" height="15" fill="rgb(237,72,25)" fg:x="188" fg:w="2"/><text x="26.4338%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="26.1838%" y="805" width="0.2786%" height="15" fill="rgb(244,70,9)" fg:x="188" fg:w="2"/><text x="26.4338%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.28%)</title><rect x="26.1838%" y="789" width="0.2786%" height="15" fill="rgb(217,125,39)" fg:x="188" fg:w="2"/><text x="26.4338%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.28%)</title><rect x="26.1838%" y="773" width="0.2786%" height="15" fill="rgb(235,36,10)" fg:x="188" fg:w="2"/><text x="26.4338%" y="783.50"></text></g><g><title>syscall (5 samples, 0.70%)</title><rect x="26.4624%" y="613" width="0.6964%" height="15" fill="rgb(251,123,47)" fg:x="190" fg:w="5"/><text x="26.7124%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (2 samples, 0.28%)</title><rect x="27.1588%" y="581" width="0.2786%" height="15" fill="rgb(221,13,13)" fg:x="195" fg:w="2"/><text x="27.4088%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.28%)</title><rect x="27.1588%" y="565" width="0.2786%" height="15" fill="rgb(238,131,9)" fg:x="195" fg:w="2"/><text x="27.4088%" y="575.50"></text></g><g><title>core::task::wake::Waker::wake (10 samples, 1.39%)</title><rect x="26.4624%" y="757" width="1.3928%" height="15" fill="rgb(211,50,8)" fg:x="190" fg:w="10"/><text x="26.7124%" y="767.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (10 samples, 1.39%)</title><rect x="26.4624%" y="741" width="1.3928%" height="15" fill="rgb(245,182,24)" fg:x="190" fg:w="10"/><text x="26.7124%" y="751.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (10 samples, 1.39%)</title><rect x="26.4624%" y="725" width="1.3928%" height="15" fill="rgb(242,14,37)" fg:x="190" fg:w="10"/><text x="26.7124%" y="735.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (10 samples, 1.39%)</title><rect x="26.4624%" y="709" width="1.3928%" height="15" fill="rgb(246,228,12)" fg:x="190" fg:w="10"/><text x="26.7124%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::schedule (10 samples, 1.39%)</title><rect x="26.4624%" y="693" width="1.3928%" height="15" fill="rgb(213,55,15)" fg:x="190" fg:w="10"/><text x="26.7124%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 1.39%)</title><rect x="26.4624%" y="677" width="1.3928%" height="15" fill="rgb(209,9,3)" fg:x="190" fg:w="10"/><text x="26.7124%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (10 samples, 1.39%)</title><rect x="26.4624%" y="661" width="1.3928%" height="15" fill="rgb(230,59,30)" fg:x="190" fg:w="10"/><text x="26.7124%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (10 samples, 1.39%)</title><rect x="26.4624%" y="645" width="1.3928%" height="15" fill="rgb(209,121,21)" fg:x="190" fg:w="10"/><text x="26.7124%" y="655.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 1.39%)</title><rect x="26.4624%" y="629" width="1.3928%" height="15" fill="rgb(220,109,13)" fg:x="190" fg:w="10"/><text x="26.7124%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (5 samples, 0.70%)</title><rect x="27.1588%" y="613" width="0.6964%" height="15" fill="rgb(232,18,1)" fg:x="195" fg:w="5"/><text x="27.4088%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (5 samples, 0.70%)</title><rect x="27.1588%" y="597" width="0.6964%" height="15" fill="rgb(215,41,42)" fg:x="195" fg:w="5"/><text x="27.4088%" y="607.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (3 samples, 0.42%)</title><rect x="27.4373%" y="581" width="0.4178%" height="15" fill="rgb(224,123,36)" fg:x="197" fg:w="3"/><text x="27.6873%" y="591.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (3 samples, 0.42%)</title><rect x="27.4373%" y="565" width="0.4178%" height="15" fill="rgb(240,125,3)" fg:x="197" fg:w="3"/><text x="27.6873%" y="575.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (3 samples, 0.42%)</title><rect x="27.4373%" y="549" width="0.4178%" height="15" fill="rgb(205,98,50)" fg:x="197" fg:w="3"/><text x="27.6873%" y="559.50"></text></g><g><title>mio::waker::Waker::wake (3 samples, 0.42%)</title><rect x="27.4373%" y="533" width="0.4178%" height="15" fill="rgb(205,185,37)" fg:x="197" fg:w="3"/><text x="27.6873%" y="543.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (3 samples, 0.42%)</title><rect x="27.4373%" y="517" width="0.4178%" height="15" fill="rgb(238,207,15)" fg:x="197" fg:w="3"/><text x="27.6873%" y="527.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (3 samples, 0.42%)</title><rect x="27.4373%" y="501" width="0.4178%" height="15" fill="rgb(213,199,42)" fg:x="197" fg:w="3"/><text x="27.6873%" y="511.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (3 samples, 0.42%)</title><rect x="27.4373%" y="485" width="0.4178%" height="15" fill="rgb(235,201,11)" fg:x="197" fg:w="3"/><text x="27.6873%" y="495.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (3 samples, 0.42%)</title><rect x="27.4373%" y="469" width="0.4178%" height="15" fill="rgb(207,46,11)" fg:x="197" fg:w="3"/><text x="27.6873%" y="479.50"></text></g><g><title>write (3 samples, 0.42%)</title><rect x="27.4373%" y="453" width="0.4178%" height="15" fill="rgb(241,35,35)" fg:x="197" fg:w="3"/><text x="27.6873%" y="463.50"></text></g><g><title>tokio::runtime::coop::budget (14 samples, 1.95%)</title><rect x="26.0446%" y="949" width="1.9499%" height="15" fill="rgb(243,32,47)" fg:x="187" fg:w="14"/><text x="26.2946%" y="959.50">t..</text></g><g><title>tokio::runtime::coop::with_budget (14 samples, 1.95%)</title><rect x="26.0446%" y="933" width="1.9499%" height="15" fill="rgb(247,202,23)" fg:x="187" fg:w="14"/><text x="26.2946%" y="943.50">t..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (14 samples, 1.95%)</title><rect x="26.0446%" y="917" width="1.9499%" height="15" fill="rgb(219,102,11)" fg:x="187" fg:w="14"/><text x="26.2946%" y="927.50">t..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (14 samples, 1.95%)</title><rect x="26.0446%" y="901" width="1.9499%" height="15" fill="rgb(243,110,44)" fg:x="187" fg:w="14"/><text x="26.2946%" y="911.50">c..</text></g><g><title>db_operations::criterion_benchmark::{{closure}}::{{closure}}::{{closure}} (14 samples, 1.95%)</title><rect x="26.0446%" y="885" width="1.9499%" height="15" fill="rgb(222,74,54)" fg:x="187" fg:w="14"/><text x="26.2946%" y="895.50">d..</text></g><g><title>slatedb::db::Db::put_with_options::{{closure}} (14 samples, 1.95%)</title><rect x="26.0446%" y="869" width="1.9499%" height="15" fill="rgb(216,99,12)" fg:x="187" fg:w="14"/><text x="26.2946%" y="879.50">s..</text></g><g><title>slatedb::db::Db::write_with_options::{{closure}} (14 samples, 1.95%)</title><rect x="26.0446%" y="853" width="1.9499%" height="15" fill="rgb(226,22,26)" fg:x="187" fg:w="14"/><text x="26.2946%" y="863.50">s..</text></g><g><title>slatedb::db::DbInner::write_with_options::{{closure}} (14 samples, 1.95%)</title><rect x="26.0446%" y="837" width="1.9499%" height="15" fill="rgb(217,163,10)" fg:x="187" fg:w="14"/><text x="26.2946%" y="847.50">s..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (11 samples, 1.53%)</title><rect x="26.4624%" y="821" width="1.5320%" height="15" fill="rgb(213,25,53)" fg:x="190" fg:w="11"/><text x="26.7124%" y="831.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (11 samples, 1.53%)</title><rect x="26.4624%" y="805" width="1.5320%" height="15" fill="rgb(252,105,26)" fg:x="190" fg:w="11"/><text x="26.7124%" y="815.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (11 samples, 1.53%)</title><rect x="26.4624%" y="789" width="1.5320%" height="15" fill="rgb(220,39,43)" fg:x="190" fg:w="11"/><text x="26.7124%" y="799.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (11 samples, 1.53%)</title><rect x="26.4624%" y="773" width="1.5320%" height="15" fill="rgb(229,68,48)" fg:x="190" fg:w="11"/><text x="26.7124%" y="783.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (1 samples, 0.14%)</title><rect x="27.8552%" y="757" width="0.1393%" height="15" fill="rgb(252,8,32)" fg:x="200" fg:w="1"/><text x="28.1052%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (1 samples, 0.14%)</title><rect x="27.8552%" y="741" width="0.1393%" height="15" fill="rgb(223,20,43)" fg:x="200" fg:w="1"/><text x="28.1052%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_and (1 samples, 0.14%)</title><rect x="27.8552%" y="725" width="0.1393%" height="15" fill="rgb(229,81,49)" fg:x="200" fg:w="1"/><text x="28.1052%" y="735.50"></text></g><g><title>db_operations-a (212 samples, 29.53%)</title><rect x="0.0000%" y="1349" width="29.5265%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1359.50">db_operations-a</text></g><g><title>_start (212 samples, 29.53%)</title><rect x="0.0000%" y="1333" width="29.5265%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1343.50">_start</text></g><g><title>__libc_start_main (212 samples, 29.53%)</title><rect x="0.0000%" y="1317" width="29.5265%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1327.50">__libc_start_main</text></g><g><title>main (212 samples, 29.53%)</title><rect x="0.0000%" y="1301" width="29.5265%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1311.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (212 samples, 29.53%)</title><rect x="0.0000%" y="1285" width="29.5265%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1295.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (212 samples, 29.53%)</title><rect x="0.0000%" y="1269" width="29.5265%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1279.50">core::ops::function::FnOnce::call_once</text></g><g><title>db_operations::main (212 samples, 29.53%)</title><rect x="0.0000%" y="1253" width="29.5265%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1263.50">db_operations::main</text></g><g><title>db_operations::benches (212 samples, 29.53%)</title><rect x="0.0000%" y="1237" width="29.5265%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1247.50">db_operations::benches</text></g><g><title>db_operations::criterion_benchmark (212 samples, 29.53%)</title><rect x="0.0000%" y="1221" width="29.5265%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1231.50">db_operations::criterion_benchmark</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (212 samples, 29.53%)</title><rect x="0.0000%" y="1205" width="29.5265%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1215.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (212 samples, 29.53%)</title><rect x="0.0000%" y="1189" width="29.5265%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1199.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::b..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (212 samples, 29.53%)</title><rect x="0.0000%" y="1173" width="29.5265%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1183.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::r..</text></g><g><title>criterion::routine::Routine::profile (212 samples, 29.53%)</title><rect x="0.0000%" y="1157" width="29.5265%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1167.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (25 samples, 3.48%)</title><rect x="26.0446%" y="1141" width="3.4819%" height="15" fill="rgb(235,30,7)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1151.50">&lt;cr..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (25 samples, 3.48%)</title><rect x="26.0446%" y="1125" width="3.4819%" height="15" fill="rgb(250,79,13)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1135.50">cri..</text></g><g><title>db_operations::criterion_benchmark::{{closure}} (25 samples, 3.48%)</title><rect x="26.0446%" y="1109" width="3.4819%" height="15" fill="rgb(211,146,34)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1119.50">db_..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (25 samples, 3.48%)</title><rect x="26.0446%" y="1093" width="3.4819%" height="15" fill="rgb(228,22,38)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1103.50">cri..</text></g><g><title>&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (25 samples, 3.48%)</title><rect x="26.0446%" y="1077" width="3.4819%" height="15" fill="rgb(235,168,5)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1087.50">&lt;&amp;t..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (25 samples, 3.48%)</title><rect x="26.0446%" y="1061" width="3.4819%" height="15" fill="rgb(221,155,16)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1071.50">tok..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (25 samples, 3.48%)</title><rect x="26.0446%" y="1045" width="3.4819%" height="15" fill="rgb(215,215,53)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1055.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (25 samples, 3.48%)</title><rect x="26.0446%" y="1029" width="3.4819%" height="15" fill="rgb(223,4,10)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1039.50">tok..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (25 samples, 3.48%)</title><rect x="26.0446%" y="1013" width="3.4819%" height="15" fill="rgb(234,103,6)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1023.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (25 samples, 3.48%)</title><rect x="26.0446%" y="997" width="3.4819%" height="15" fill="rgb(227,97,0)" fg:x="187" fg:w="25"/><text x="26.2946%" y="1007.50">tok..</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (25 samples, 3.48%)</title><rect x="26.0446%" y="981" width="3.4819%" height="15" fill="rgb(234,150,53)" fg:x="187" fg:w="25"/><text x="26.2946%" y="991.50">tok..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (25 samples, 3.48%)</title><rect x="26.0446%" y="965" width="3.4819%" height="15" fill="rgb(228,201,54)" fg:x="187" fg:w="25"/><text x="26.2946%" y="975.50">tok..</text></g><g><title>tokio::runtime::park::CachedParkThread::park (11 samples, 1.53%)</title><rect x="27.9944%" y="949" width="1.5320%" height="15" fill="rgb(222,22,37)" fg:x="201" fg:w="11"/><text x="28.2444%" y="959.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (11 samples, 1.53%)</title><rect x="27.9944%" y="933" width="1.5320%" height="15" fill="rgb(237,53,32)" fg:x="201" fg:w="11"/><text x="28.2444%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 1.53%)</title><rect x="27.9944%" y="917" width="1.5320%" height="15" fill="rgb(233,25,53)" fg:x="201" fg:w="11"/><text x="28.2444%" y="927.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (11 samples, 1.53%)</title><rect x="27.9944%" y="901" width="1.5320%" height="15" fill="rgb(210,40,34)" fg:x="201" fg:w="11"/><text x="28.2444%" y="911.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (11 samples, 1.53%)</title><rect x="27.9944%" y="885" width="1.5320%" height="15" fill="rgb(241,220,44)" fg:x="201" fg:w="11"/><text x="28.2444%" y="895.50"></text></g><g><title>tokio::runtime::park::Inner::park (11 samples, 1.53%)</title><rect x="27.9944%" y="869" width="1.5320%" height="15" fill="rgb(235,28,35)" fg:x="201" fg:w="11"/><text x="28.2444%" y="879.50"></text></g><g><title>std::sync::condvar::Condvar::wait (11 samples, 1.53%)</title><rect x="27.9944%" y="853" width="1.5320%" height="15" fill="rgb(210,56,17)" fg:x="201" fg:w="11"/><text x="28.2444%" y="863.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (11 samples, 1.53%)</title><rect x="27.9944%" y="837" width="1.5320%" height="15" fill="rgb(224,130,29)" fg:x="201" fg:w="11"/><text x="28.2444%" y="847.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (11 samples, 1.53%)</title><rect x="27.9944%" y="821" width="1.5320%" height="15" fill="rgb(235,212,8)" fg:x="201" fg:w="11"/><text x="28.2444%" y="831.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (11 samples, 1.53%)</title><rect x="27.9944%" y="805" width="1.5320%" height="15" fill="rgb(223,33,50)" fg:x="201" fg:w="11"/><text x="28.2444%" y="815.50"></text></g><g><title>syscall (11 samples, 1.53%)</title><rect x="27.9944%" y="789" width="1.5320%" height="15" fill="rgb(219,149,13)" fg:x="201" fg:w="11"/><text x="28.2444%" y="799.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (2 samples, 0.28%)</title><rect x="29.5265%" y="677" width="0.2786%" height="15" fill="rgb(250,156,29)" fg:x="212" fg:w="2"/><text x="29.7765%" y="687.50"></text></g><g><title>powf32x (2 samples, 0.28%)</title><rect x="29.5265%" y="661" width="0.2786%" height="15" fill="rgb(216,193,19)" fg:x="212" fg:w="2"/><text x="29.7765%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.14%)</title><rect x="29.8050%" y="629" width="0.1393%" height="15" fill="rgb(216,135,14)" fg:x="214" fg:w="1"/><text x="30.0550%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (4 samples, 0.56%)</title><rect x="29.5265%" y="693" width="0.5571%" height="15" fill="rgb(241,47,5)" fg:x="212" fg:w="4"/><text x="29.7765%" y="703.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.28%)</title><rect x="29.8050%" y="677" width="0.2786%" height="15" fill="rgb(233,42,35)" fg:x="214" fg:w="2"/><text x="30.0550%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (2 samples, 0.28%)</title><rect x="29.8050%" y="661" width="0.2786%" height="15" fill="rgb(231,13,6)" fg:x="214" fg:w="2"/><text x="30.0550%" y="671.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.28%)</title><rect x="29.8050%" y="645" width="0.2786%" height="15" fill="rgb(207,181,40)" fg:x="214" fg:w="2"/><text x="30.0550%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.14%)</title><rect x="29.9443%" y="629" width="0.1393%" height="15" fill="rgb(254,173,49)" fg:x="215" fg:w="1"/><text x="30.1943%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (4 samples, 0.56%)</title><rect x="30.0836%" y="693" width="0.5571%" height="15" fill="rgb(221,1,38)" fg:x="216" fg:w="4"/><text x="30.3336%" y="703.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.56%)</title><rect x="30.0836%" y="677" width="0.5571%" height="15" fill="rgb(206,124,46)" fg:x="216" fg:w="4"/><text x="30.3336%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (4 samples, 0.56%)</title><rect x="30.0836%" y="661" width="0.5571%" height="15" fill="rgb(249,21,11)" fg:x="216" fg:w="4"/><text x="30.3336%" y="671.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4 samples, 0.56%)</title><rect x="30.0836%" y="645" width="0.5571%" height="15" fill="rgb(222,201,40)" fg:x="216" fg:w="4"/><text x="30.3336%" y="655.50"></text></g><g><title>clock_gettime (4 samples, 0.56%)</title><rect x="30.0836%" y="629" width="0.5571%" height="15" fill="rgb(235,61,29)" fg:x="216" fg:w="4"/><text x="30.3336%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (6 samples, 0.84%)</title><rect x="31.0585%" y="549" width="0.8357%" height="15" fill="rgb(219,207,3)" fg:x="223" fg:w="6"/><text x="31.3085%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.84%)</title><rect x="31.0585%" y="533" width="0.8357%" height="15" fill="rgb(222,56,46)" fg:x="223" fg:w="6"/><text x="31.3085%" y="543.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (141 samples, 19.64%)</title><rect x="30.6407%" y="565" width="19.6379%" height="15" fill="rgb(239,76,54)" fg:x="220" fg:w="141"/><text x="30.8907%" y="575.50">std::sys::pal::unix::futex::fut..</text></g><g><title>syscall (132 samples, 18.38%)</title><rect x="31.8942%" y="549" width="18.3844%" height="15" fill="rgb(231,124,27)" fg:x="229" fg:w="132"/><text x="32.1442%" y="559.50">syscall</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (144 samples, 20.06%)</title><rect x="30.6407%" y="629" width="20.0557%" height="15" fill="rgb(249,195,6)" fg:x="220" fg:w="144"/><text x="30.8907%" y="639.50">tokio::runtime::scheduler::mult..</text></g><g><title>std::sync::condvar::Condvar::wait (144 samples, 20.06%)</title><rect x="30.6407%" y="613" width="20.0557%" height="15" fill="rgb(237,174,47)" fg:x="220" fg:w="144"/><text x="30.8907%" y="623.50">std::sync::condvar::Condvar::wa..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (144 samples, 20.06%)</title><rect x="30.6407%" y="597" width="20.0557%" height="15" fill="rgb(206,201,31)" fg:x="220" fg:w="144"/><text x="30.8907%" y="607.50">std::sys::sync::condvar::futex:..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (144 samples, 20.06%)</title><rect x="30.6407%" y="581" width="20.0557%" height="15" fill="rgb(231,57,52)" fg:x="220" fg:w="144"/><text x="30.8907%" y="591.50">std::sys::sync::condvar::futex:..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (3 samples, 0.42%)</title><rect x="50.2786%" y="565" width="0.4178%" height="15" fill="rgb(248,177,22)" fg:x="361" fg:w="3"/><text x="50.5286%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.42%)</title><rect x="50.2786%" y="549" width="0.4178%" height="15" fill="rgb(215,211,37)" fg:x="361" fg:w="3"/><text x="50.5286%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.42%)</title><rect x="50.2786%" y="533" width="0.4178%" height="15" fill="rgb(241,128,51)" fg:x="361" fg:w="3"/><text x="50.5286%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.14%)</title><rect x="50.6964%" y="501" width="0.1393%" height="15" fill="rgb(227,165,31)" fg:x="364" fg:w="1"/><text x="50.9464%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.14%)</title><rect x="50.6964%" y="485" width="0.1393%" height="15" fill="rgb(228,167,24)" fg:x="364" fg:w="1"/><text x="50.9464%" y="495.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (1 samples, 0.14%)</title><rect x="50.6964%" y="469" width="0.1393%" height="15" fill="rgb(228,143,12)" fg:x="364" fg:w="1"/><text x="50.9464%" y="479.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::{{closure}} (1 samples, 0.14%)</title><rect x="50.6964%" y="453" width="0.1393%" height="15" fill="rgb(249,149,8)" fg:x="364" fg:w="1"/><text x="50.9464%" y="463.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (1 samples, 0.14%)</title><rect x="50.6964%" y="437" width="0.1393%" height="15" fill="rgb(243,35,44)" fg:x="364" fg:w="1"/><text x="50.9464%" y="447.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (1 samples, 0.14%)</title><rect x="50.6964%" y="421" width="0.1393%" height="15" fill="rgb(246,89,9)" fg:x="364" fg:w="1"/><text x="50.9464%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.14%)</title><rect x="50.6964%" y="405" width="0.1393%" height="15" fill="rgb(233,213,13)" fg:x="364" fg:w="1"/><text x="50.9464%" y="415.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.14%)</title><rect x="50.6964%" y="389" width="0.1393%" height="15" fill="rgb(233,141,41)" fg:x="364" fg:w="1"/><text x="50.9464%" y="399.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.14%)</title><rect x="50.8357%" y="389" width="0.1393%" height="15" fill="rgb(239,167,4)" fg:x="365" fg:w="1"/><text x="51.0857%" y="399.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (1 samples, 0.14%)</title><rect x="50.8357%" y="373" width="0.1393%" height="15" fill="rgb(209,217,16)" fg:x="365" fg:w="1"/><text x="51.0857%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (1 samples, 0.14%)</title><rect x="50.8357%" y="357" width="0.1393%" height="15" fill="rgb(219,88,35)" fg:x="365" fg:w="1"/><text x="51.0857%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.14%)</title><rect x="50.8357%" y="341" width="0.1393%" height="15" fill="rgb(220,193,23)" fg:x="365" fg:w="1"/><text x="51.0857%" y="351.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (3 samples, 0.42%)</title><rect x="50.6964%" y="565" width="0.4178%" height="15" fill="rgb(230,90,52)" fg:x="364" fg:w="3"/><text x="50.9464%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (3 samples, 0.42%)</title><rect x="50.6964%" y="549" width="0.4178%" height="15" fill="rgb(252,106,19)" fg:x="364" fg:w="3"/><text x="50.9464%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (3 samples, 0.42%)</title><rect x="50.6964%" y="533" width="0.4178%" height="15" fill="rgb(206,74,20)" fg:x="364" fg:w="3"/><text x="50.9464%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3 samples, 0.42%)</title><rect x="50.6964%" y="517" width="0.4178%" height="15" fill="rgb(230,138,44)" fg:x="364" fg:w="3"/><text x="50.9464%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="50.8357%" y="501" width="0.2786%" height="15" fill="rgb(235,182,43)" fg:x="365" fg:w="2"/><text x="51.0857%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2 samples, 0.28%)</title><rect x="50.8357%" y="485" width="0.2786%" height="15" fill="rgb(242,16,51)" fg:x="365" fg:w="2"/><text x="51.0857%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.28%)</title><rect x="50.8357%" y="469" width="0.2786%" height="15" fill="rgb(248,9,4)" fg:x="365" fg:w="2"/><text x="51.0857%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (2 samples, 0.28%)</title><rect x="50.8357%" y="453" width="0.2786%" height="15" fill="rgb(210,31,22)" fg:x="365" fg:w="2"/><text x="51.0857%" y="463.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.28%)</title><rect x="50.8357%" y="437" width="0.2786%" height="15" fill="rgb(239,54,39)" fg:x="365" fg:w="2"/><text x="51.0857%" y="447.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::{{closure}} (2 samples, 0.28%)</title><rect x="50.8357%" y="421" width="0.2786%" height="15" fill="rgb(230,99,41)" fg:x="365" fg:w="2"/><text x="51.0857%" y="431.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (2 samples, 0.28%)</title><rect x="50.8357%" y="405" width="0.2786%" height="15" fill="rgb(253,106,12)" fg:x="365" fg:w="2"/><text x="51.0857%" y="415.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (1 samples, 0.14%)</title><rect x="50.9749%" y="389" width="0.1393%" height="15" fill="rgb(213,46,41)" fg:x="366" fg:w="1"/><text x="51.2249%" y="399.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.14%)</title><rect x="50.9749%" y="373" width="0.1393%" height="15" fill="rgb(215,133,35)" fg:x="366" fg:w="1"/><text x="51.2249%" y="383.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.14%)</title><rect x="50.9749%" y="357" width="0.1393%" height="15" fill="rgb(213,28,5)" fg:x="366" fg:w="1"/><text x="51.2249%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (2 samples, 0.28%)</title><rect x="51.1142%" y="549" width="0.2786%" height="15" fill="rgb(215,77,49)" fg:x="367" fg:w="2"/><text x="51.3642%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (2 samples, 0.28%)</title><rect x="51.1142%" y="533" width="0.2786%" height="15" fill="rgb(248,100,22)" fg:x="367" fg:w="2"/><text x="51.3642%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2 samples, 0.28%)</title><rect x="51.1142%" y="517" width="0.2786%" height="15" fill="rgb(208,67,9)" fg:x="367" fg:w="2"/><text x="51.3642%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.28%)</title><rect x="51.1142%" y="501" width="0.2786%" height="15" fill="rgb(219,133,21)" fg:x="367" fg:w="2"/><text x="51.3642%" y="511.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (2 samples, 0.28%)</title><rect x="51.1142%" y="485" width="0.2786%" height="15" fill="rgb(246,46,29)" fg:x="367" fg:w="2"/><text x="51.3642%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.28%)</title><rect x="51.1142%" y="469" width="0.2786%" height="15" fill="rgb(246,185,52)" fg:x="367" fg:w="2"/><text x="51.3642%" y="479.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::{{closure}} (2 samples, 0.28%)</title><rect x="51.1142%" y="453" width="0.2786%" height="15" fill="rgb(252,136,11)" fg:x="367" fg:w="2"/><text x="51.3642%" y="463.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (2 samples, 0.28%)</title><rect x="51.1142%" y="437" width="0.2786%" height="15" fill="rgb(219,138,53)" fg:x="367" fg:w="2"/><text x="51.3642%" y="447.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.28%)</title><rect x="51.1142%" y="421" width="0.2786%" height="15" fill="rgb(211,51,23)" fg:x="367" fg:w="2"/><text x="51.3642%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.14%)</title><rect x="51.2535%" y="405" width="0.1393%" height="15" fill="rgb(247,221,28)" fg:x="368" fg:w="1"/><text x="51.5035%" y="415.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (1 samples, 0.14%)</title><rect x="51.2535%" y="389" width="0.1393%" height="15" fill="rgb(251,222,45)" fg:x="368" fg:w="1"/><text x="51.5035%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (181 samples, 25.21%)</title><rect x="30.6407%" y="693" width="25.2089%" height="15" fill="rgb(217,162,53)" fg:x="220" fg:w="181"/><text x="30.8907%" y="703.50">tokio::runtime::scheduler::multi_thread:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (181 samples, 25.21%)</title><rect x="30.6407%" y="677" width="25.2089%" height="15" fill="rgb(229,93,14)" fg:x="220" fg:w="181"/><text x="30.8907%" y="687.50">tokio::runtime::scheduler::multi_thread:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (181 samples, 25.21%)</title><rect x="30.6407%" y="661" width="25.2089%" height="15" fill="rgb(209,67,49)" fg:x="220" fg:w="181"/><text x="30.8907%" y="671.50">tokio::runtime::scheduler::multi_thread:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (181 samples, 25.21%)</title><rect x="30.6407%" y="645" width="25.2089%" height="15" fill="rgb(213,87,29)" fg:x="220" fg:w="181"/><text x="30.8907%" y="655.50">tokio::runtime::scheduler::multi_thread:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (37 samples, 5.15%)</title><rect x="50.6964%" y="629" width="5.1532%" height="15" fill="rgb(205,151,52)" fg:x="364" fg:w="37"/><text x="50.9464%" y="639.50">tokio:..</text></g><g><title>tokio::runtime::driver::Driver::park (37 samples, 5.15%)</title><rect x="50.6964%" y="613" width="5.1532%" height="15" fill="rgb(253,215,39)" fg:x="364" fg:w="37"/><text x="50.9464%" y="623.50">tokio:..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (37 samples, 5.15%)</title><rect x="50.6964%" y="597" width="5.1532%" height="15" fill="rgb(221,220,41)" fg:x="364" fg:w="37"/><text x="50.9464%" y="607.50">tokio:..</text></g><g><title>tokio::runtime::time::Driver::park (37 samples, 5.15%)</title><rect x="50.6964%" y="581" width="5.1532%" height="15" fill="rgb(218,133,21)" fg:x="364" fg:w="37"/><text x="50.9464%" y="591.50">tokio:..</text></g><g><title>tokio::runtime::time::Driver::park_internal (34 samples, 4.74%)</title><rect x="51.1142%" y="565" width="4.7354%" height="15" fill="rgb(221,193,43)" fg:x="367" fg:w="34"/><text x="51.3642%" y="575.50">tokio:..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (32 samples, 4.46%)</title><rect x="51.3928%" y="549" width="4.4568%" height="15" fill="rgb(240,128,52)" fg:x="369" fg:w="32"/><text x="51.6428%" y="559.50">tokio..</text></g><g><title>mio::poll::Poll::poll (32 samples, 4.46%)</title><rect x="51.3928%" y="533" width="4.4568%" height="15" fill="rgb(253,114,12)" fg:x="369" fg:w="32"/><text x="51.6428%" y="543.50">mio::..</text></g><g><title>mio::sys::unix::selector::Selector::select (32 samples, 4.46%)</title><rect x="51.3928%" y="517" width="4.4568%" height="15" fill="rgb(215,223,47)" fg:x="369" fg:w="32"/><text x="51.6428%" y="527.50">mio::..</text></g><g><title>epoll_wait (32 samples, 4.46%)</title><rect x="51.3928%" y="501" width="4.4568%" height="15" fill="rgb(248,225,23)" fg:x="369" fg:w="32"/><text x="51.6428%" y="511.50">epoll..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.14%)</title><rect x="55.8496%" y="629" width="0.1393%" height="15" fill="rgb(250,108,0)" fg:x="401" fg:w="1"/><text x="56.0996%" y="639.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.14%)</title><rect x="55.8496%" y="613" width="0.1393%" height="15" fill="rgb(228,208,7)" fg:x="401" fg:w="1"/><text x="56.0996%" y="623.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.14%)</title><rect x="55.8496%" y="597" width="0.1393%" height="15" fill="rgb(244,45,10)" fg:x="401" fg:w="1"/><text x="56.0996%" y="607.50"></text></g><g><title>&lt;slatedb::config::SystemClock as slatedb::config::Clock&gt;::now (3 samples, 0.42%)</title><rect x="56.1281%" y="373" width="0.4178%" height="15" fill="rgb(207,125,25)" fg:x="403" fg:w="3"/><text x="56.3781%" y="383.50"></text></g><g><title>std::time::SystemTime::now (1 samples, 0.14%)</title><rect x="56.4067%" y="357" width="0.1393%" height="15" fill="rgb(210,195,18)" fg:x="405" fg:w="1"/><text x="56.6567%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (1 samples, 0.14%)</title><rect x="56.4067%" y="341" width="0.1393%" height="15" fill="rgb(249,80,12)" fg:x="405" fg:w="1"/><text x="56.6567%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.14%)</title><rect x="56.4067%" y="325" width="0.1393%" height="15" fill="rgb(221,65,9)" fg:x="405" fg:w="1"/><text x="56.6567%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.14%)</title><rect x="56.4067%" y="309" width="0.1393%" height="15" fill="rgb(235,49,36)" fg:x="405" fg:w="1"/><text x="56.6567%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;slatedb::batch::WriteOp&gt;&gt; (6 samples, 0.84%)</title><rect x="56.5460%" y="373" width="0.8357%" height="15" fill="rgb(225,32,20)" fg:x="406" fg:w="6"/><text x="56.7960%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.84%)</title><rect x="56.5460%" y="357" width="0.8357%" height="15" fill="rgb(215,141,46)" fg:x="406" fg:w="6"/><text x="56.7960%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;slatedb::batch::WriteOp,alloc::alloc::Global&gt;&gt; (6 samples, 0.84%)</title><rect x="56.5460%" y="341" width="0.8357%" height="15" fill="rgb(250,160,47)" fg:x="406" fg:w="6"/><text x="56.7960%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.84%)</title><rect x="56.5460%" y="325" width="0.8357%" height="15" fill="rgb(216,222,40)" fg:x="406" fg:w="6"/><text x="56.7960%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;slatedb::batch::WriteOp&gt;&gt; (6 samples, 0.84%)</title><rect x="56.5460%" y="309" width="0.8357%" height="15" fill="rgb(234,217,39)" fg:x="406" fg:w="6"/><text x="56.7960%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.84%)</title><rect x="56.5460%" y="293" width="0.8357%" height="15" fill="rgb(207,178,40)" fg:x="406" fg:w="6"/><text x="56.7960%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6 samples, 0.84%)</title><rect x="56.5460%" y="277" width="0.8357%" height="15" fill="rgb(221,136,13)" fg:x="406" fg:w="6"/><text x="56.7960%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.84%)</title><rect x="56.5460%" y="261" width="0.8357%" height="15" fill="rgb(249,199,10)" fg:x="406" fg:w="6"/><text x="56.7960%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.84%)</title><rect x="56.5460%" y="245" width="0.8357%" height="15" fill="rgb(249,222,13)" fg:x="406" fg:w="6"/><text x="56.7960%" y="255.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.84%)</title><rect x="56.5460%" y="229" width="0.8357%" height="15" fill="rgb(244,185,38)" fg:x="406" fg:w="6"/><text x="56.7960%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.84%)</title><rect x="56.5460%" y="213" width="0.8357%" height="15" fill="rgb(236,202,9)" fg:x="406" fg:w="6"/><text x="56.7960%" y="223.50"></text></g><g><title>cfree (6 samples, 0.84%)</title><rect x="56.5460%" y="197" width="0.8357%" height="15" fill="rgb(250,229,37)" fg:x="406" fg:w="6"/><text x="56.7960%" y="207.50"></text></g><g><title>slatedb::db_state::DbState::state_copy (3 samples, 0.42%)</title><rect x="57.6602%" y="357" width="0.4178%" height="15" fill="rgb(206,174,23)" fg:x="414" fg:w="3"/><text x="57.9102%" y="367.50"></text></g><g><title>&lt;slatedb::db_state::COWDbState as core::clone::Clone&gt;::clone (3 samples, 0.42%)</title><rect x="57.6602%" y="341" width="0.4178%" height="15" fill="rgb(211,33,43)" fg:x="414" fg:w="3"/><text x="57.9102%" y="351.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="57.9387%" y="325" width="0.1393%" height="15" fill="rgb(245,58,50)" fg:x="416" fg:w="1"/><text x="58.1887%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.84%)</title><rect x="58.0780%" y="341" width="0.8357%" height="15" fill="rgb(244,68,36)" fg:x="417" fg:w="6"/><text x="58.3280%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.14%)</title><rect x="58.7744%" y="325" width="0.1393%" height="15" fill="rgb(232,229,15)" fg:x="422" fg:w="1"/><text x="59.0244%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.14%)</title><rect x="58.7744%" y="309" width="0.1393%" height="15" fill="rgb(254,30,23)" fg:x="422" fg:w="1"/><text x="59.0244%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.14%)</title><rect x="58.7744%" y="293" width="0.1393%" height="15" fill="rgb(235,160,14)" fg:x="422" fg:w="1"/><text x="59.0244%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.14%)</title><rect x="58.7744%" y="277" width="0.1393%" height="15" fill="rgb(212,155,44)" fg:x="422" fg:w="1"/><text x="59.0244%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.14%)</title><rect x="58.7744%" y="261" width="0.1393%" height="15" fill="rgb(226,2,50)" fg:x="422" fg:w="1"/><text x="59.0244%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.14%)</title><rect x="58.7744%" y="245" width="0.1393%" height="15" fill="rgb(234,177,6)" fg:x="422" fg:w="1"/><text x="59.0244%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.14%)</title><rect x="58.7744%" y="229" width="0.1393%" height="15" fill="rgb(217,24,9)" fg:x="422" fg:w="1"/><text x="59.0244%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.14%)</title><rect x="58.7744%" y="213" width="0.1393%" height="15" fill="rgb(220,13,46)" fg:x="422" fg:w="1"/><text x="59.0244%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="58.9136%" y="309" width="0.1393%" height="15" fill="rgb(239,221,27)" fg:x="423" fg:w="1"/><text x="59.1636%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::db_state::COWDbState&gt; (1 samples, 0.14%)</title><rect x="58.9136%" y="293" width="0.1393%" height="15" fill="rgb(222,198,25)" fg:x="423" fg:w="1"/><text x="59.1636%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::db_state::CoreDbState&gt; (1 samples, 0.14%)</title><rect x="58.9136%" y="277" width="0.1393%" height="15" fill="rgb(211,99,13)" fg:x="423" fg:w="1"/><text x="59.1636%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;slatedb::db_state::SsTableHandle&gt;&gt; (1 samples, 0.14%)</title><rect x="58.9136%" y="261" width="0.1393%" height="15" fill="rgb(232,111,31)" fg:x="423" fg:w="1"/><text x="59.1636%" y="271.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="58.9136%" y="245" width="0.1393%" height="15" fill="rgb(245,82,37)" fg:x="423" fg:w="1"/><text x="59.1636%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (1 samples, 0.14%)</title><rect x="58.9136%" y="229" width="0.1393%" height="15" fill="rgb(227,149,46)" fg:x="423" fg:w="1"/><text x="59.1636%" y="239.50"></text></g><g><title>slatedb::db_state::DbState::update_clock_tick (13 samples, 1.81%)</title><rect x="57.3816%" y="373" width="1.8106%" height="15" fill="rgb(218,36,50)" fg:x="412" fg:w="13"/><text x="57.6316%" y="383.50">s..</text></g><g><title>slatedb::db_state::DbState::update_state (8 samples, 1.11%)</title><rect x="58.0780%" y="357" width="1.1142%" height="15" fill="rgb(226,80,48)" fg:x="417" fg:w="8"/><text x="58.3280%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;slatedb::db_state::COWDbState&gt;&gt; (2 samples, 0.28%)</title><rect x="58.9136%" y="341" width="0.2786%" height="15" fill="rgb(238,224,15)" fg:x="423" fg:w="2"/><text x="59.1636%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="58.9136%" y="325" width="0.2786%" height="15" fill="rgb(241,136,10)" fg:x="423" fg:w="2"/><text x="59.1636%" y="335.50"></text></g><g><title>cfree (1 samples, 0.14%)</title><rect x="59.0529%" y="309" width="0.1393%" height="15" fill="rgb(208,32,45)" fg:x="424" fg:w="1"/><text x="59.3029%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.28%)</title><rect x="59.1922%" y="101" width="0.2786%" height="15" fill="rgb(207,135,9)" fg:x="425" fg:w="2"/><text x="59.4422%" y="111.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="59.1922%" y="85" width="0.2786%" height="15" fill="rgb(206,86,44)" fg:x="425" fg:w="2"/><text x="59.4422%" y="95.50"></text></g><g><title>cfree (1 samples, 0.14%)</title><rect x="59.3315%" y="69" width="0.1393%" height="15" fill="rgb(245,177,15)" fg:x="426" fg:w="1"/><text x="59.5815%" y="79.50"></text></g><g><title>crossbeam_epoch::default::pin (3 samples, 0.42%)</title><rect x="59.1922%" y="325" width="0.4178%" height="15" fill="rgb(206,64,50)" fg:x="425" fg:w="3"/><text x="59.4422%" y="335.50"></text></g><g><title>crossbeam_epoch::default::with_handle (3 samples, 0.42%)</title><rect x="59.1922%" y="309" width="0.4178%" height="15" fill="rgb(234,36,40)" fg:x="425" fg:w="3"/><text x="59.4422%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.42%)</title><rect x="59.1922%" y="293" width="0.4178%" height="15" fill="rgb(213,64,8)" fg:x="425" fg:w="3"/><text x="59.4422%" y="303.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (3 samples, 0.42%)</title><rect x="59.1922%" y="277" width="0.4178%" height="15" fill="rgb(210,75,36)" fg:x="425" fg:w="3"/><text x="59.4422%" y="287.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (3 samples, 0.42%)</title><rect x="59.1922%" y="261" width="0.4178%" height="15" fill="rgb(229,88,21)" fg:x="425" fg:w="3"/><text x="59.4422%" y="271.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (3 samples, 0.42%)</title><rect x="59.1922%" y="245" width="0.4178%" height="15" fill="rgb(252,204,47)" fg:x="425" fg:w="3"/><text x="59.4422%" y="255.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (3 samples, 0.42%)</title><rect x="59.1922%" y="229" width="0.4178%" height="15" fill="rgb(208,77,27)" fg:x="425" fg:w="3"/><text x="59.4422%" y="239.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (3 samples, 0.42%)</title><rect x="59.1922%" y="213" width="0.4178%" height="15" fill="rgb(221,76,26)" fg:x="425" fg:w="3"/><text x="59.4422%" y="223.50"></text></g><g><title>core::mem::drop (3 samples, 0.42%)</title><rect x="59.1922%" y="197" width="0.4178%" height="15" fill="rgb(225,139,18)" fg:x="425" fg:w="3"/><text x="59.4422%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (3 samples, 0.42%)</title><rect x="59.1922%" y="181" width="0.4178%" height="15" fill="rgb(230,137,11)" fg:x="425" fg:w="3"/><text x="59.4422%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (3 samples, 0.42%)</title><rect x="59.1922%" y="165" width="0.4178%" height="15" fill="rgb(212,28,1)" fg:x="425" fg:w="3"/><text x="59.4422%" y="175.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (3 samples, 0.42%)</title><rect x="59.1922%" y="149" width="0.4178%" height="15" fill="rgb(248,164,17)" fg:x="425" fg:w="3"/><text x="59.4422%" y="159.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (3 samples, 0.42%)</title><rect x="59.1922%" y="133" width="0.4178%" height="15" fill="rgb(222,171,42)" fg:x="425" fg:w="3"/><text x="59.4422%" y="143.50"></text></g><g><title>crossbeam_skiplist::base::Node&lt;K,V&gt;::finalize (3 samples, 0.42%)</title><rect x="59.1922%" y="117" width="0.4178%" height="15" fill="rgb(243,84,45)" fg:x="425" fg:w="3"/><text x="59.4422%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::mem_table::ValueWithAttributes&gt; (1 samples, 0.14%)</title><rect x="59.4708%" y="101" width="0.1393%" height="15" fill="rgb(252,49,23)" fg:x="427" fg:w="1"/><text x="59.7208%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::types::ValueDeletable&gt; (1 samples, 0.14%)</title><rect x="59.4708%" y="85" width="0.1393%" height="15" fill="rgb(215,19,7)" fg:x="427" fg:w="1"/><text x="59.7208%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.14%)</title><rect x="59.4708%" y="69" width="0.1393%" height="15" fill="rgb(238,81,41)" fg:x="427" fg:w="1"/><text x="59.7208%" y="79.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="59.4708%" y="53" width="0.1393%" height="15" fill="rgb(210,199,37)" fg:x="427" fg:w="1"/><text x="59.7208%" y="63.50"></text></g><g><title>cfree (1 samples, 0.14%)</title><rect x="59.4708%" y="37" width="0.1393%" height="15" fill="rgb(244,192,49)" fg:x="427" fg:w="1"/><text x="59.7208%" y="47.50"></text></g><g><title>crossbeam_skiplist::base::Node&lt;K,V&gt;::alloc (5 samples, 0.70%)</title><rect x="60.3064%" y="293" width="0.6964%" height="15" fill="rgb(226,211,11)" fg:x="433" fg:w="5"/><text x="60.5564%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.70%)</title><rect x="60.3064%" y="277" width="0.6964%" height="15" fill="rgb(236,162,54)" fg:x="433" fg:w="5"/><text x="60.5564%" y="287.50"></text></g><g><title>__rdl_alloc (5 samples, 0.70%)</title><rect x="60.3064%" y="261" width="0.6964%" height="15" fill="rgb(220,229,9)" fg:x="433" fg:w="5"/><text x="60.5564%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.70%)</title><rect x="60.3064%" y="245" width="0.6964%" height="15" fill="rgb(250,87,22)" fg:x="433" fg:w="5"/><text x="60.5564%" y="255.50"></text></g><g><title>__libc_malloc (5 samples, 0.70%)</title><rect x="60.3064%" y="229" width="0.6964%" height="15" fill="rgb(239,43,17)" fg:x="433" fg:w="5"/><text x="60.5564%" y="239.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::Ord&gt;::cmp (3 samples, 0.42%)</title><rect x="61.8384%" y="277" width="0.4178%" height="15" fill="rgb(231,177,25)" fg:x="444" fg:w="3"/><text x="62.0884%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.42%)</title><rect x="61.8384%" y="261" width="0.4178%" height="15" fill="rgb(219,179,1)" fg:x="444" fg:w="3"/><text x="62.0884%" y="271.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.42%)</title><rect x="61.8384%" y="245" width="0.4178%" height="15" fill="rgb(238,219,53)" fg:x="444" fg:w="3"/><text x="62.0884%" y="255.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load (6 samples, 0.84%)</title><rect x="62.2563%" y="277" width="0.8357%" height="15" fill="rgb(232,167,36)" fg:x="447" fg:w="6"/><text x="62.5063%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.84%)</title><rect x="62.2563%" y="261" width="0.8357%" height="15" fill="rgb(244,19,51)" fg:x="447" fg:w="6"/><text x="62.5063%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.84%)</title><rect x="62.2563%" y="245" width="0.8357%" height="15" fill="rgb(224,6,22)" fg:x="447" fg:w="6"/><text x="62.5063%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.14%)</title><rect x="63.0919%" y="245" width="0.1393%" height="15" fill="rgb(224,145,5)" fg:x="453" fg:w="1"/><text x="63.3419%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.14%)</title><rect x="63.0919%" y="229" width="0.1393%" height="15" fill="rgb(234,130,49)" fg:x="453" fg:w="1"/><text x="63.3419%" y="239.50"></text></g><g><title>slatedb::batch_write::&lt;impl slatedb::db::DbInner&gt;::write_batch::{{closure}} (53 samples, 7.38%)</title><rect x="55.9889%" y="389" width="7.3816%" height="15" fill="rgb(254,6,2)" fg:x="402" fg:w="53"/><text x="56.2389%" y="399.50">slatedb::b..</text></g><g><title>slatedb::mem_table::WritableKVTable::put (30 samples, 4.18%)</title><rect x="59.1922%" y="373" width="4.1783%" height="15" fill="rgb(208,96,46)" fg:x="425" fg:w="30"/><text x="59.4422%" y="383.50">slate..</text></g><g><title>slatedb::mem_table::KVTable::put_or_delete (30 samples, 4.18%)</title><rect x="59.1922%" y="357" width="4.1783%" height="15" fill="rgb(239,3,39)" fg:x="425" fg:w="30"/><text x="59.4422%" y="367.50">slate..</text></g><g><title>crossbeam_skiplist::map::SkipMap&lt;K,V&gt;::compare_insert (30 samples, 4.18%)</title><rect x="59.1922%" y="341" width="4.1783%" height="15" fill="rgb(233,210,1)" fg:x="425" fg:w="30"/><text x="59.4422%" y="351.50">cross..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::compare_insert (27 samples, 3.76%)</title><rect x="59.6100%" y="325" width="3.7604%" height="15" fill="rgb(244,137,37)" fg:x="428" fg:w="27"/><text x="59.8600%" y="335.50">cros..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (27 samples, 3.76%)</title><rect x="59.6100%" y="309" width="3.7604%" height="15" fill="rgb(240,136,2)" fg:x="428" fg:w="27"/><text x="59.8600%" y="319.50">cros..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (17 samples, 2.37%)</title><rect x="61.0028%" y="293" width="2.3677%" height="15" fill="rgb(239,18,37)" fg:x="438" fg:w="17"/><text x="61.2528%" y="303.50">cr..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::help_unlink (2 samples, 0.28%)</title><rect x="63.0919%" y="277" width="0.2786%" height="15" fill="rgb(218,185,22)" fg:x="453" fg:w="2"/><text x="63.3419%" y="287.50"></text></g><g><title>crossbeam_skiplist::base::Node&lt;K,V&gt;::decrement (2 samples, 0.28%)</title><rect x="63.0919%" y="261" width="0.2786%" height="15" fill="rgb(225,218,4)" fg:x="453" fg:w="2"/><text x="63.3419%" y="271.50"></text></g><g><title>crossbeam_epoch::guard::Guard::defer_unchecked (1 samples, 0.14%)</title><rect x="63.2312%" y="245" width="0.1393%" height="15" fill="rgb(230,182,32)" fg:x="454" fg:w="1"/><text x="63.4812%" y="255.50"></text></g><g><title>crossbeam_epoch::internal::Local::defer (1 samples, 0.14%)</title><rect x="63.2312%" y="229" width="0.1393%" height="15" fill="rgb(242,56,43)" fg:x="454" fg:w="1"/><text x="63.4812%" y="239.50"></text></g><g><title>crossbeam_epoch::internal::Global::push_bag (1 samples, 0.14%)</title><rect x="63.2312%" y="213" width="0.1393%" height="15" fill="rgb(233,99,24)" fg:x="454" fg:w="1"/><text x="63.4812%" y="223.50"></text></g><g><title>core::sync::atomic::fence (1 samples, 0.14%)</title><rect x="63.2312%" y="197" width="0.1393%" height="15" fill="rgb(234,209,42)" fg:x="454" fg:w="1"/><text x="63.4812%" y="207.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5 samples, 0.70%)</title><rect x="63.3705%" y="309" width="0.6964%" height="15" fill="rgb(227,7,12)" fg:x="455" fg:w="5"/><text x="63.6205%" y="319.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (5 samples, 0.70%)</title><rect x="63.3705%" y="293" width="0.6964%" height="15" fill="rgb(245,203,43)" fg:x="455" fg:w="5"/><text x="63.6205%" y="303.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.28%)</title><rect x="63.7883%" y="277" width="0.2786%" height="15" fill="rgb(238,205,33)" fg:x="458" fg:w="2"/><text x="64.0383%" y="287.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (2 samples, 0.28%)</title><rect x="63.7883%" y="261" width="0.2786%" height="15" fill="rgb(231,56,7)" fg:x="458" fg:w="2"/><text x="64.0383%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.28%)</title><rect x="63.7883%" y="245" width="0.2786%" height="15" fill="rgb(244,186,29)" fg:x="458" fg:w="2"/><text x="64.0383%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.28%)</title><rect x="63.7883%" y="229" width="0.2786%" height="15" fill="rgb(234,111,31)" fg:x="458" fg:w="2"/><text x="64.0383%" y="239.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (8 samples, 1.11%)</title><rect x="63.3705%" y="389" width="1.1142%" height="15" fill="rgb(241,149,10)" fg:x="455" fg:w="8"/><text x="63.6205%" y="399.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8 samples, 1.11%)</title><rect x="63.3705%" y="373" width="1.1142%" height="15" fill="rgb(249,206,44)" fg:x="455" fg:w="8"/><text x="63.6205%" y="383.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (8 samples, 1.11%)</title><rect x="63.3705%" y="357" width="1.1142%" height="15" fill="rgb(251,153,30)" fg:x="455" fg:w="8"/><text x="63.6205%" y="367.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (8 samples, 1.11%)</title><rect x="63.3705%" y="341" width="1.1142%" height="15" fill="rgb(239,152,38)" fg:x="455" fg:w="8"/><text x="63.6205%" y="351.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (8 samples, 1.11%)</title><rect x="63.3705%" y="325" width="1.1142%" height="15" fill="rgb(249,139,47)" fg:x="455" fg:w="8"/><text x="63.6205%" y="335.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (3 samples, 0.42%)</title><rect x="64.0669%" y="309" width="0.4178%" height="15" fill="rgb(244,64,35)" fg:x="460" fg:w="3"/><text x="64.3169%" y="319.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.42%)</title><rect x="64.0669%" y="293" width="0.4178%" height="15" fill="rgb(216,46,15)" fg:x="460" fg:w="3"/><text x="64.3169%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.42%)</title><rect x="64.0669%" y="277" width="0.4178%" height="15" fill="rgb(250,74,19)" fg:x="460" fg:w="3"/><text x="64.3169%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.42%)</title><rect x="64.0669%" y="261" width="0.4178%" height="15" fill="rgb(249,42,33)" fg:x="460" fg:w="3"/><text x="64.3169%" y="271.50"></text></g><g><title>tokio::runtime::context::CONTEXT::{{constant}}::{{closure}} (3 samples, 0.42%)</title><rect x="64.0669%" y="245" width="0.4178%" height="15" fill="rgb(242,149,17)" fg:x="460" fg:w="3"/><text x="64.3169%" y="255.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (3 samples, 0.42%)</title><rect x="64.0669%" y="229" width="0.4178%" height="15" fill="rgb(244,29,21)" fg:x="460" fg:w="3"/><text x="64.3169%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.42%)</title><rect x="64.0669%" y="213" width="0.4178%" height="15" fill="rgb(220,130,37)" fg:x="460" fg:w="3"/><text x="64.3169%" y="223.50"></text></g><g><title>syscall (119 samples, 16.57%)</title><rect x="64.4847%" y="277" width="16.5738%" height="15" fill="rgb(211,67,2)" fg:x="463" fg:w="119"/><text x="64.7347%" y="287.50">syscall</text></g><g><title>tokio::runtime::coop::budget (182 samples, 25.35%)</title><rect x="55.8496%" y="677" width="25.3482%" height="15" fill="rgb(235,68,52)" fg:x="401" fg:w="182"/><text x="56.0996%" y="687.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (182 samples, 25.35%)</title><rect x="55.8496%" y="661" width="25.3482%" height="15" fill="rgb(246,142,3)" fg:x="401" fg:w="182"/><text x="56.0996%" y="671.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (182 samples, 25.35%)</title><rect x="55.8496%" y="645" width="25.3482%" height="15" fill="rgb(241,25,7)" fg:x="401" fg:w="182"/><text x="56.0996%" y="655.50">tokio::runtime::scheduler::multi_thread:..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (181 samples, 25.21%)</title><rect x="55.9889%" y="629" width="25.2089%" height="15" fill="rgb(242,119,39)" fg:x="402" fg:w="181"/><text x="56.2389%" y="639.50">tokio::runtime::task::LocalNotified&lt;S&gt;::..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (181 samples, 25.21%)</title><rect x="55.9889%" y="613" width="25.2089%" height="15" fill="rgb(241,98,45)" fg:x="402" fg:w="181"/><text x="56.2389%" y="623.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (181 samples, 25.21%)</title><rect x="55.9889%" y="597" width="25.2089%" height="15" fill="rgb(254,28,30)" fg:x="402" fg:w="181"/><text x="56.2389%" y="607.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (181 samples, 25.21%)</title><rect x="55.9889%" y="581" width="25.2089%" height="15" fill="rgb(241,142,54)" fg:x="402" fg:w="181"/><text x="56.2389%" y="591.50">tokio::runtime::task::harness::Harness&lt;T..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (181 samples, 25.21%)</title><rect x="55.9889%" y="565" width="25.2089%" height="15" fill="rgb(222,85,15)" fg:x="402" fg:w="181"/><text x="56.2389%" y="575.50">tokio::runtime::task::harness::Harness&lt;T..</text></g><g><title>tokio::runtime::task::harness::poll_future (181 samples, 25.21%)</title><rect x="55.9889%" y="549" width="25.2089%" height="15" fill="rgb(210,85,47)" fg:x="402" fg:w="181"/><text x="56.2389%" y="559.50">tokio::runtime::task::harness::poll_futu..</text></g><g><title>std::panic::catch_unwind (181 samples, 25.21%)</title><rect x="55.9889%" y="533" width="25.2089%" height="15" fill="rgb(224,206,25)" fg:x="402" fg:w="181"/><text x="56.2389%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (181 samples, 25.21%)</title><rect x="55.9889%" y="517" width="25.2089%" height="15" fill="rgb(243,201,19)" fg:x="402" fg:w="181"/><text x="56.2389%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (181 samples, 25.21%)</title><rect x="55.9889%" y="501" width="25.2089%" height="15" fill="rgb(236,59,4)" fg:x="402" fg:w="181"/><text x="56.2389%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (181 samples, 25.21%)</title><rect x="55.9889%" y="485" width="25.2089%" height="15" fill="rgb(254,179,45)" fg:x="402" fg:w="181"/><text x="56.2389%" y="495.50">&lt;core::panic::unwind_safe::AssertUnwindS..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (181 samples, 25.21%)</title><rect x="55.9889%" y="469" width="25.2089%" height="15" fill="rgb(226,14,10)" fg:x="402" fg:w="181"/><text x="56.2389%" y="479.50">tokio::runtime::task::harness::poll_futu..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (181 samples, 25.21%)</title><rect x="55.9889%" y="453" width="25.2089%" height="15" fill="rgb(244,27,41)" fg:x="402" fg:w="181"/><text x="56.2389%" y="463.50">tokio::runtime::task::core::Core&lt;T,S&gt;::p..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (181 samples, 25.21%)</title><rect x="55.9889%" y="437" width="25.2089%" height="15" fill="rgb(235,35,32)" fg:x="402" fg:w="181"/><text x="56.2389%" y="447.50">tokio::loom::std::unsafe_cell::UnsafeCel..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (181 samples, 25.21%)</title><rect x="55.9889%" y="421" width="25.2089%" height="15" fill="rgb(218,68,31)" fg:x="402" fg:w="181"/><text x="56.2389%" y="431.50">tokio::runtime::task::core::Core&lt;T,S&gt;::p..</text></g><g><title>slatedb::batch_write::&lt;impl slatedb::db::DbInner&gt;::spawn_write_task::{{closure}} (181 samples, 25.21%)</title><rect x="55.9889%" y="405" width="25.2089%" height="15" fill="rgb(207,120,37)" fg:x="402" fg:w="181"/><text x="56.2389%" y="415.50">slatedb::batch_write::&lt;impl slatedb::db:..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (120 samples, 16.71%)</title><rect x="64.4847%" y="389" width="16.7131%" height="15" fill="rgb(227,98,0)" fg:x="463" fg:w="120"/><text x="64.7347%" y="399.50">tokio::sync::oneshot::Send..</text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (120 samples, 16.71%)</title><rect x="64.4847%" y="373" width="16.7131%" height="15" fill="rgb(207,7,3)" fg:x="463" fg:w="120"/><text x="64.7347%" y="383.50">tokio::sync::oneshot::Inne..</text></g><g><title>tokio::sync::oneshot::Task::with_task (120 samples, 16.71%)</title><rect x="64.4847%" y="357" width="16.7131%" height="15" fill="rgb(206,98,19)" fg:x="463" fg:w="120"/><text x="64.7347%" y="367.50">tokio::sync::oneshot::Task..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (120 samples, 16.71%)</title><rect x="64.4847%" y="341" width="16.7131%" height="15" fill="rgb(217,5,26)" fg:x="463" fg:w="120"/><text x="64.7347%" y="351.50">tokio::loom::std::unsafe_c..</text></g><g><title>tokio::sync::oneshot::Task::with_task::{{closure}} (120 samples, 16.71%)</title><rect x="64.4847%" y="325" width="16.7131%" height="15" fill="rgb(235,190,38)" fg:x="463" fg:w="120"/><text x="64.7347%" y="335.50">tokio::sync::oneshot::Task..</text></g><g><title>core::ops::function::FnOnce::call_once (120 samples, 16.71%)</title><rect x="64.4847%" y="309" width="16.7131%" height="15" fill="rgb(247,86,24)" fg:x="463" fg:w="120"/><text x="64.7347%" y="319.50">core::ops::function::FnOnc..</text></g><g><title>core::task::wake::Waker::wake_by_ref (120 samples, 16.71%)</title><rect x="64.4847%" y="293" width="16.7131%" height="15" fill="rgb(205,101,16)" fg:x="463" fg:w="120"/><text x="64.7347%" y="303.50">core::task::wake::Waker::w..</text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.14%)</title><rect x="81.0585%" y="277" width="0.1393%" height="15" fill="rgb(246,168,33)" fg:x="582" fg:w="1"/><text x="81.3085%" y="287.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (1 samples, 0.14%)</title><rect x="81.0585%" y="261" width="0.1393%" height="15" fill="rgb(231,114,1)" fg:x="582" fg:w="1"/><text x="81.3085%" y="271.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::notify_one (1 samples, 0.14%)</title><rect x="81.0585%" y="245" width="0.1393%" height="15" fill="rgb(207,184,53)" fg:x="582" fg:w="1"/><text x="81.3085%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (1 samples, 0.14%)</title><rect x="81.0585%" y="229" width="0.1393%" height="15" fill="rgb(224,95,51)" fg:x="582" fg:w="1"/><text x="81.3085%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.14%)</title><rect x="81.0585%" y="213" width="0.1393%" height="15" fill="rgb(212,188,45)" fg:x="582" fg:w="1"/><text x="81.3085%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_poll (1 samples, 0.14%)</title><rect x="81.1978%" y="677" width="0.1393%" height="15" fill="rgb(223,154,38)" fg:x="583" fg:w="1"/><text x="81.4478%" y="687.50"></text></g><g><title>syscall (89 samples, 12.40%)</title><rect x="81.3370%" y="629" width="12.3955%" height="15" fill="rgb(251,22,52)" fg:x="584" fg:w="89"/><text x="81.5870%" y="639.50">syscall</text></g><g><title>core::sync::atomic::AtomicUsize::swap (1 samples, 0.14%)</title><rect x="93.7326%" y="597" width="0.1393%" height="15" fill="rgb(229,209,22)" fg:x="673" fg:w="1"/><text x="93.9826%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.14%)</title><rect x="93.7326%" y="581" width="0.1393%" height="15" fill="rgb(234,138,34)" fg:x="673" fg:w="1"/><text x="93.9826%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (300 samples, 41.78%)</title><rect x="55.8496%" y="693" width="41.7827%" height="15" fill="rgb(212,95,11)" fg:x="401" fg:w="300"/><text x="56.0996%" y="703.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (117 samples, 16.30%)</title><rect x="81.3370%" y="677" width="16.2953%" height="15" fill="rgb(240,179,47)" fg:x="584" fg:w="117"/><text x="81.5870%" y="687.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (117 samples, 16.30%)</title><rect x="81.3370%" y="661" width="16.2953%" height="15" fill="rgb(240,163,11)" fg:x="584" fg:w="117"/><text x="81.5870%" y="671.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (117 samples, 16.30%)</title><rect x="81.3370%" y="645" width="16.2953%" height="15" fill="rgb(236,37,12)" fg:x="584" fg:w="117"/><text x="81.5870%" y="655.50">tokio::runtime::scheduler..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (28 samples, 3.90%)</title><rect x="93.7326%" y="629" width="3.8997%" height="15" fill="rgb(232,164,16)" fg:x="673" fg:w="28"/><text x="93.9826%" y="639.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (28 samples, 3.90%)</title><rect x="93.7326%" y="613" width="3.8997%" height="15" fill="rgb(244,205,15)" fg:x="673" fg:w="28"/><text x="93.9826%" y="623.50">toki..</text></g><g><title>tokio::runtime::driver::Handle::unpark (27 samples, 3.76%)</title><rect x="93.8719%" y="597" width="3.7604%" height="15" fill="rgb(223,117,47)" fg:x="674" fg:w="27"/><text x="94.1219%" y="607.50">toki..</text></g><g><title>tokio::runtime::driver::IoHandle::unpark (27 samples, 3.76%)</title><rect x="93.8719%" y="581" width="3.7604%" height="15" fill="rgb(244,107,35)" fg:x="674" fg:w="27"/><text x="94.1219%" y="591.50">toki..</text></g><g><title>tokio::runtime::io::driver::Handle::unpark (27 samples, 3.76%)</title><rect x="93.8719%" y="565" width="3.7604%" height="15" fill="rgb(205,140,8)" fg:x="674" fg:w="27"/><text x="94.1219%" y="575.50">toki..</text></g><g><title>mio::waker::Waker::wake (27 samples, 3.76%)</title><rect x="93.8719%" y="549" width="3.7604%" height="15" fill="rgb(228,84,46)" fg:x="674" fg:w="27"/><text x="94.1219%" y="559.50">mio:..</text></g><g><title>mio::sys::unix::waker::Waker::wake (27 samples, 3.76%)</title><rect x="93.8719%" y="533" width="3.7604%" height="15" fill="rgb(254,188,9)" fg:x="674" fg:w="27"/><text x="94.1219%" y="543.50">mio:..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (27 samples, 3.76%)</title><rect x="93.8719%" y="517" width="3.7604%" height="15" fill="rgb(206,112,54)" fg:x="674" fg:w="27"/><text x="94.1219%" y="527.50">&lt;&amp;st..</text></g><g><title>std::sys::pal::unix::fs::File::write (27 samples, 3.76%)</title><rect x="93.8719%" y="501" width="3.7604%" height="15" fill="rgb(216,84,49)" fg:x="674" fg:w="27"/><text x="94.1219%" y="511.50">std:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (27 samples, 3.76%)</title><rect x="93.8719%" y="485" width="3.7604%" height="15" fill="rgb(214,194,35)" fg:x="674" fg:w="27"/><text x="94.1219%" y="495.50">std:..</text></g><g><title>write (27 samples, 3.76%)</title><rect x="93.8719%" y="469" width="3.7604%" height="15" fill="rgb(249,28,3)" fg:x="674" fg:w="27"/><text x="94.1219%" y="479.50">write</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (1 samples, 0.14%)</title><rect x="97.6323%" y="677" width="0.1393%" height="15" fill="rgb(222,56,52)" fg:x="701" fg:w="1"/><text x="97.8823%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::inject::shared::Shared&lt;T&gt;::pop (1 samples, 0.14%)</title><rect x="97.6323%" y="661" width="0.1393%" height="15" fill="rgb(245,217,50)" fg:x="701" fg:w="1"/><text x="97.8823%" y="671.50"></text></g><g><title>&lt;tokio::runtime::scheduler::inject::pop::Pop&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="97.6323%" y="645" width="0.1393%" height="15" fill="rgb(213,201,24)" fg:x="701" fg:w="1"/><text x="97.8823%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::inject::synced::Synced::pop (1 samples, 0.14%)</title><rect x="97.6323%" y="629" width="0.1393%" height="15" fill="rgb(248,116,28)" fg:x="701" fg:w="1"/><text x="97.8823%" y="639.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::get_queue_next (1 samples, 0.14%)</title><rect x="97.6323%" y="613" width="0.1393%" height="15" fill="rgb(219,72,43)" fg:x="701" fg:w="1"/><text x="97.8823%" y="623.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (1 samples, 0.14%)</title><rect x="97.6323%" y="597" width="0.1393%" height="15" fill="rgb(209,138,14)" fg:x="701" fg:w="1"/><text x="97.8823%" y="607.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::get_queue_next::{{closure}} (1 samples, 0.14%)</title><rect x="97.6323%" y="581" width="0.1393%" height="15" fill="rgb(222,18,33)" fg:x="701" fg:w="1"/><text x="97.8823%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (7 samples, 0.97%)</title><rect x="97.6323%" y="693" width="0.9749%" height="15" fill="rgb(213,199,7)" fg:x="701" fg:w="7"/><text x="97.8823%" y="703.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Worker::inject (6 samples, 0.84%)</title><rect x="97.7716%" y="677" width="0.8357%" height="15" fill="rgb(250,110,10)" fg:x="702" fg:w="6"/><text x="98.0216%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.84%)</title><rect x="97.7716%" y="661" width="0.8357%" height="15" fill="rgb(248,123,6)" fg:x="702" fg:w="6"/><text x="98.0216%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (6 samples, 0.84%)</title><rect x="97.7716%" y="645" width="0.8357%" height="15" fill="rgb(206,91,31)" fg:x="702" fg:w="6"/><text x="98.0216%" y="655.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6 samples, 0.84%)</title><rect x="97.7716%" y="629" width="0.8357%" height="15" fill="rgb(211,154,13)" fg:x="702" fg:w="6"/><text x="98.0216%" y="639.50"></text></g><g><title>all (718 samples, 100%)</title><rect x="0.0000%" y="1365" width="100.0000%" height="15" fill="rgb(225,148,7)" fg:x="0" fg:w="718"/><text x="0.2500%" y="1375.50"></text></g><g><title>tokio-runtime-w (506 samples, 70.47%)</title><rect x="29.5265%" y="1349" width="70.4735%" height="15" fill="rgb(220,160,43)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1359.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (506 samples, 70.47%)</title><rect x="29.5265%" y="1333" width="70.4735%" height="15" fill="rgb(213,52,39)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1343.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (506 samples, 70.47%)</title><rect x="29.5265%" y="1317" width="70.4735%" height="15" fill="rgb(243,137,7)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1327.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (506 samples, 70.47%)</title><rect x="29.5265%" y="1301" width="70.4735%" height="15" fill="rgb(230,79,13)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1311.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (506 samples, 70.47%)</title><rect x="29.5265%" y="1285" width="70.4735%" height="15" fill="rgb(247,105,23)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1295.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="1269" width="70.4735%" height="15" fill="rgb(223,179,41)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1279.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (506 samples, 70.47%)</title><rect x="29.5265%" y="1253" width="70.4735%" height="15" fill="rgb(218,9,34)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1263.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (506 samples, 70.47%)</title><rect x="29.5265%" y="1237" width="70.4735%" height="15" fill="rgb(222,106,8)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1247.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (506 samples, 70.47%)</title><rect x="29.5265%" y="1221" width="70.4735%" height="15" fill="rgb(211,220,0)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1231.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (506 samples, 70.47%)</title><rect x="29.5265%" y="1205" width="70.4735%" height="15" fill="rgb(229,52,16)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1215.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="1189" width="70.4735%" height="15" fill="rgb(212,155,18)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1199.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (506 samples, 70.47%)</title><rect x="29.5265%" y="1173" width="70.4735%" height="15" fill="rgb(242,21,14)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1183.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="1157" width="70.4735%" height="15" fill="rgb(222,19,48)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1167.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (506 samples, 70.47%)</title><rect x="29.5265%" y="1141" width="70.4735%" height="15" fill="rgb(232,45,27)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1151.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (506 samples, 70.47%)</title><rect x="29.5265%" y="1125" width="70.4735%" height="15" fill="rgb(249,103,42)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1135.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (506 samples, 70.47%)</title><rect x="29.5265%" y="1109" width="70.4735%" height="15" fill="rgb(246,81,33)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1119.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (506 samples, 70.47%)</title><rect x="29.5265%" y="1093" width="70.4735%" height="15" fill="rgb(252,33,42)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1103.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (506 samples, 70.47%)</title><rect x="29.5265%" y="1077" width="70.4735%" height="15" fill="rgb(209,212,41)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1087.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (506 samples, 70.47%)</title><rect x="29.5265%" y="1061" width="70.4735%" height="15" fill="rgb(207,154,6)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1071.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (506 samples, 70.47%)</title><rect x="29.5265%" y="1045" width="70.4735%" height="15" fill="rgb(223,64,47)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1055.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (506 samples, 70.47%)</title><rect x="29.5265%" y="1029" width="70.4735%" height="15" fill="rgb(211,161,38)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1039.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (506 samples, 70.47%)</title><rect x="29.5265%" y="1013" width="70.4735%" height="15" fill="rgb(219,138,40)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (506 samples, 70.47%)</title><rect x="29.5265%" y="997" width="70.4735%" height="15" fill="rgb(241,228,46)" fg:x="212" fg:w="506"/><text x="29.7765%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (506 samples, 70.47%)</title><rect x="29.5265%" y="981" width="70.4735%" height="15" fill="rgb(223,209,38)" fg:x="212" fg:w="506"/><text x="29.7765%" y="991.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (506 samples, 70.47%)</title><rect x="29.5265%" y="965" width="70.4735%" height="15" fill="rgb(236,164,45)" fg:x="212" fg:w="506"/><text x="29.7765%" y="975.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="949" width="70.4735%" height="15" fill="rgb(231,15,5)" fg:x="212" fg:w="506"/><text x="29.7765%" y="959.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (506 samples, 70.47%)</title><rect x="29.5265%" y="933" width="70.4735%" height="15" fill="rgb(252,35,15)" fg:x="212" fg:w="506"/><text x="29.7765%" y="943.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (506 samples, 70.47%)</title><rect x="29.5265%" y="917" width="70.4735%" height="15" fill="rgb(248,181,18)" fg:x="212" fg:w="506"/><text x="29.7765%" y="927.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="901" width="70.4735%" height="15" fill="rgb(233,39,42)" fg:x="212" fg:w="506"/><text x="29.7765%" y="911.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (506 samples, 70.47%)</title><rect x="29.5265%" y="885" width="70.4735%" height="15" fill="rgb(238,110,33)" fg:x="212" fg:w="506"/><text x="29.7765%" y="895.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="869" width="70.4735%" height="15" fill="rgb(233,195,10)" fg:x="212" fg:w="506"/><text x="29.7765%" y="879.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (506 samples, 70.47%)</title><rect x="29.5265%" y="853" width="70.4735%" height="15" fill="rgb(254,105,3)" fg:x="212" fg:w="506"/><text x="29.7765%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (506 samples, 70.47%)</title><rect x="29.5265%" y="837" width="70.4735%" height="15" fill="rgb(221,225,9)" fg:x="212" fg:w="506"/><text x="29.7765%" y="847.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="821" width="70.4735%" height="15" fill="rgb(224,227,45)" fg:x="212" fg:w="506"/><text x="29.7765%" y="831.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (506 samples, 70.47%)</title><rect x="29.5265%" y="805" width="70.4735%" height="15" fill="rgb(229,198,43)" fg:x="212" fg:w="506"/><text x="29.7765%" y="815.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (506 samples, 70.47%)</title><rect x="29.5265%" y="789" width="70.4735%" height="15" fill="rgb(206,209,35)" fg:x="212" fg:w="506"/><text x="29.7765%" y="799.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (506 samples, 70.47%)</title><rect x="29.5265%" y="773" width="70.4735%" height="15" fill="rgb(245,195,53)" fg:x="212" fg:w="506"/><text x="29.7765%" y="783.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="757" width="70.4735%" height="15" fill="rgb(240,92,26)" fg:x="212" fg:w="506"/><text x="29.7765%" y="767.50">tokio::runtime::context::set_scheduler::{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (506 samples, 70.47%)</title><rect x="29.5265%" y="741" width="70.4735%" height="15" fill="rgb(207,40,23)" fg:x="212" fg:w="506"/><text x="29.7765%" y="751.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (506 samples, 70.47%)</title><rect x="29.5265%" y="725" width="70.4735%" height="15" fill="rgb(223,111,35)" fg:x="212" fg:w="506"/><text x="29.7765%" y="735.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (506 samples, 70.47%)</title><rect x="29.5265%" y="709" width="70.4735%" height="15" fill="rgb(229,147,28)" fg:x="212" fg:w="506"/><text x="29.7765%" y="719.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (10 samples, 1.39%)</title><rect x="98.6072%" y="693" width="1.3928%" height="15" fill="rgb(211,29,28)" fg:x="708" fg:w="10"/><text x="98.8572%" y="703.50"></text></g></svg></svg>