"use strict";(self.webpackChunkslatedb_website=self.webpackChunkslatedb_website||[]).push([[357],{467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorials/abs","title":"Connect SlateDB to Azure Blob Storage","description":"This tutorial shows you how to use SlateDB on Azure Blob Storage (ABS). You would need an ABS account to complete the tutorial.","source":"@site/docs/tutorials/abs.md","sourceDirName":"tutorials","slug":"/tutorials/abs","permalink":"/docs/tutorials/abs","draft":false,"unlisted":false,"editUrl":"https://github.com/slatedb/slatedb-website/tree/main/docs/tutorials/abs.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Connect SlateDB to Azure Blob Storage","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Quickstart","permalink":"/docs/quickstart"},"next":{"title":"Connect SlateDB to S3","permalink":"/docs/tutorials/s3"}}');var o=n(4848),s=n(8453);const r={title:"Connect SlateDB to Azure Blob Storage",sidebar_position:1},i=void 0,c={},l=[{value:"Setup",id:"setup",level:2},{value:"Create Storage account",id:"create-storage-account",level:2},{value:"Create a project",id:"create-a-project",level:2},{value:"Add dependencies",id:"add-dependencies",level:2},{value:"Write some code",id:"write-some-code",level:2},{value:"Check the blob contents",id:"check-the-blob-contents",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This tutorial shows you how to use SlateDB on Azure Blob Storage (ABS). You would need an ABS account to complete the tutorial."}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/cli/azure/install-azure-cli",children:"Install"})," the Azure CLI."]}),"\n",(0,o.jsx)(t.h2,{id:"create-storage-account",children:"Create Storage account"}),"\n",(0,o.jsx)(t.p,{children:"The following steps creates a storage account and list the keys. This section can be skipped if you already have a storage account created."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"# Set storage account names\nStorageAccountName=<ReplaceWithAccountName>\nContainerName=<ReplaceWithContainerName>\nResourceGroupName=<ReplaceWithResourceGroupName>\n\n# Login\naz login\n\n# Create Resource Group in the default subscription.\naz group create --name $ResourceGroupName --location westus\n\n# Create Azure Storage account.\naz storage account create --name $StorageAccountName --resource-group $ResourceGroupName --location westus --sku Standard_LRS\n\n# Create a storage container\naz storage container create --name $ContainerName --account-name $StorageAccountName\n\n# Get the keys.\naz storage account keys list --resource-group $ResourceGroupName --account-name $StorageAccountName\n"})}),"\n",(0,o.jsx)(t.h2,{id:"create-a-project",children:"Create a project"}),"\n",(0,o.jsx)(t.p,{children:"Let's start by creating a new Rust project:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cargo init slatedb-abs\ncd slatedb-abs\n"})}),"\n",(0,o.jsx)(t.h2,{id:"add-dependencies",children:"Add dependencies"}),"\n",(0,o.jsxs)(t.p,{children:["Now add SlateDB and the ",(0,o.jsx)(t.code,{children:"object_store"})," crate to your ",(0,o.jsx)(t.code,{children:"Cargo.toml"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cargo add slatedb object-store --features object-store/azure\n"})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:['If you see "',(0,o.jsx)(t.code,{children:"object_store::path::Path"})," and ",(0,o.jsx)(t.code,{children:"object_store::path::Path"}),' have similar names, but are actually distinct types", you might need to pin the ',(0,o.jsx)(t.code,{children:"object_store"})," version to match ",(0,o.jsx)(t.code,{children:"slatedb"}),"'s ",(0,o.jsx)(t.code,{children:"object_store"})," version. SlateDB also exports ",(0,o.jsx)(t.code,{children:"slatedb::object_store"})," for convenience, if you'd rather use that."]})}),"\n",(0,o.jsx)(t.h2,{id:"write-some-code",children:"Write some code"}),"\n",(0,o.jsx)(t.p,{children:"This code demonstrates puts that wait for results to be durable, and then puts that do not wait."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-rust",children:'use object_store::azure::MicrosoftAzureBuilder;\nuse object_store::path::Path;\nuse object_store::ObjectStore;\nuse slatedb::config::DbOptions;\nuse slatedb::db::Db;\nuse std::sync::Arc;\n\n#[tokio::main]\nasync fn main() {\n    // construct azure blob object store.\n    let blob_store: Arc<dyn ObjectStore>  = Arc::new(MicrosoftAzureBuilder::new()\n        .with_account("<REPLACEWITHACCOUNTNAME>")\n        .with_access_key("<REPLACEWITHACCOUNTKEY>")\n        .with_container_name("<REPLACEWITHCONTAINERNAME>")\n        .build()\n        .unwrap());\n\n    // create the db.\n    let db_options = DbOptions::default();\n    let path = Path::from("test_slateDB");\n\n    println!("Opening the db");\n    let db = Db::open_with_opts(path.clone(), db_options, blob_store.clone())\n        .await\n        .expect("failed to open db");\n\n    // Put a value and wait for the flush.\n    println!("Writing a value and waiting for flush");\n    db.put(b"k1", b"value1").await;\n    println!("{:?}", db.get(b"k1").await.unwrap());\n\n    // Put 1000 keys, do not wait for it to be durable\n    println!("Writing 1000 keys without waiting for flush");\n    let write_options = slatedb::config::WriteOptions {\n        await_durable: false,\n    };\n    for i in 0..1000 {\n        db.put_with_options(\n            format!("key{}", i).as_bytes(),\n            format!("value{}", i).as_bytes(),\n            &write_options,\n        )\n        .await;\n    }\n\n    // flush to make the writes durable.\n    println!("Flushing the writes and closing the db");\n    db.flush().await.expect("failed to flush");\n    db.close().await.expect("failed to close db");\n\n    // reopen the db and read the value.\n    println!("Reopening the db");\n    let db_reopened = Db::open_with_opts(path.clone(), DbOptions::default(), blob_store.clone())\n        .await\n        .expect("failed to open db");\n    println!("Reading the value from the reopened db");\n\n    // read 20 keys\n    for i in 0..20 {\n        println!(\n            "{:?}",\n            db_reopened\n                .get(format!("key{}", i).as_bytes())\n                .await\n                .unwrap()\n        );\n    }\n    db_reopened.close().await.expect("failed to close db");\n}\n\n'})}),"\n",(0,o.jsx)(t.h2,{id:"check-the-blob-contents",children:"Check the blob contents"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'az storage blob list --container-name $ContainerName --account-name $StorageAccountName --prefix "test_slateDB/" --delimiter "/" --output table\n                           wal/\n                           manifest/\n'})}),"\n",(0,o.jsx)(t.p,{children:"There are three folders:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"manifest"}),": Contains the manifest files. Manifest files defines the state of the DB, including the set of SSTs that are part of the DB."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"wal"}),": Contains the write-ahead log files."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"compacted"}),": Contains the compacted SST files. This short example does not create compacted files."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Let's check the ",(0,o.jsx)(t.code,{children:"wal"})," folder."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'az storage blob list --container-name $ContainerName --account-name $StorageAccountName --prefix "test_slateDB/wal/" --delimiter "/" --output table\n\nName                                       Blob Type    Blob Tier    Length    Content Type              Last Modified              Snapshot\n-----------------------------------------  -----------  -----------  --------  ------------------------  -------------------------  ----------\ntest_slateDB/wal/00000000000000000001.sst  BlockBlob    Hot          64        application/octet-stream  2024-09-07T01:15:49+00:00\ntest_slateDB/wal/00000000000000000002.sst  BlockBlob    Hot          138       application/octet-stream  2024-09-07T01:15:49+00:00\ntest_slateDB/wal/00000000000000000003.sst  BlockBlob    Hot          23388     application/octet-stream  2024-09-07T01:15:49+00:00\ntest_slateDB/wal/00000000000000000004.sst  BlockBlob    Hot          64        application/octet-stream  2024-09-07T01:15:50+00:00\n\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Each of these SST files is a write-ahead log (WAL) entry. They get flushed based on the ",(0,o.jsx)(t.code,{children:"flush_interval"})," config or when ",(0,o.jsx)(t.code,{children:"flush"})," is called explicitly."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);