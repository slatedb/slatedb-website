"use strict";(self.webpackChunkslatedb_website=self.webpackChunkslatedb_website||[]).push([[822],{4143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"quickstart","title":"Quickstart","description":"SlateDB is a Rust library. It doesn\'t currently ship with any language bindings, so you must use Rust or generate your own bindings.","source":"@site/docs/quickstart.md","sourceDirName":".","slug":"/quickstart","permalink":"/docs/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/slatedb/slatedb-website/tree/main/docs/quickstart.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/docs/introduction"},"next":{"title":"Connect SlateDB to Azure Blob Storage","permalink":"/docs/tutorials/abs"}}');var a=n(4848),o=n(8453);const r={sidebar_position:2},i="Quickstart",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"quickstart",children:"Quickstart"})}),"\n",(0,a.jsx)(t.p,{children:"SlateDB is a Rust library. It doesn't currently ship with any language bindings, so you must use Rust or generate your own bindings."}),"\n",(0,a.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(t.p,{children:["Add the following to your ",(0,a.jsx)(t.code,{children:"Cargo.toml"})," to use SlateDB:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-toml",children:'[dependencies]\nslatedb = "*"\ntokio = "*"\n'})}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(t.p,{children:["SlateDB uses ",(0,a.jsx)(t.a,{href:"https://crates.io/crates/tokio",children:(0,a.jsx)(t.code,{children:"tokio"})})," as its async runtime and ",(0,a.jsx)(t.a,{href:"https://docs.rs/object_store/latest/object_store/",children:(0,a.jsx)(t.code,{children:"object_store"})})," to interact with object storage. The code below shows a simple in-memory example."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use slatedb::{Db, SlateDBError};\nuse slatedb::object_store::{ObjectStore, memory::InMemory};\nuse std::sync::Arc;\n\n#[tokio::main]\nasync fn main() -> Result<(), SlateDBError> {\n    // Setup\n    let object_store: Arc<dyn ObjectStore> = Arc::new(InMemory::new());\n    let kv_store = Db::open("/tmp/test_kv_store", object_store).await?;\n\n    // Put\n    let key = b"test_key";\n    let value = b"test_value";\n    kv_store.put(key, value).await?;\n\n    // Get\n    assert_eq!(\n        kv_store.get(key).await?,\n        Some("test_value".into())\n    );\n\n    // Delete\n    kv_store.delete(key).await?;\n    assert!(kv_store.get(key).await?.is_none());\n\n    kv_store.put(b"test_key1", b"test_value1").await?;\n    kv_store.put(b"test_key2", b"test_value2").await?;\n    kv_store.put(b"test_key3", b"test_value3").await?;\n    kv_store.put(b"test_key4", b"test_value4").await?;\n\n    // Scan over unbound range\n    let mut iter = kv_store.scan::<Vec<u8>, _>(..).await?;\n    let mut count = 1;\n    while let Ok(Some(item)) = iter.next().await {\n        assert_eq!(\n            item.key,\n            format!("test_key{count}").into_bytes()\n        );\n        assert_eq!(\n            item.value,\n            format!("test_value{count}").into_bytes()\n        );\n        count += 1;\n    }\n\n    // Scan over bound range\n    let mut iter = kv_store.scan("test_key1"..="test_key2").await?;\n    assert_eq!(\n        iter.next().await?,\n        Some((b"test_key1", b"test_value1").into())\n    );\n    assert_eq!(\n        iter.next().await?,\n        Some((b"test_key2", b"test_value2").into())\n    );\n\n    // Seek ahead to next key\n    let mut iter = kv_store.scan::<Vec<u8>, _>(..).await?;\n    let next_key = b"test_key4";\n    iter.seek(next_key).await?;\n    assert_eq!(\n        iter.next().await?,\n        Some((b"test_key4", b"test_value4").into())\n    );\n    assert_eq!(iter.next().await?, None);\n\n    // Close\n    kv_store.close().await?;\n\n    Ok(())\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);