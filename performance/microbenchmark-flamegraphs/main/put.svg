<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1414" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1397.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1397.00"> </text><svg id="frames" x="10" width="1180" total_samples="746"><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.27%)</title><rect x="0.0000%" y="661" width="0.2681%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.27%)</title><rect x="0.0000%" y="645" width="0.2681%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2 samples, 0.27%)</title><rect x="0.0000%" y="629" width="0.2681%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.27%)</title><rect x="0.0000%" y="613" width="0.2681%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.27%)</title><rect x="0.0000%" y="597" width="0.2681%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.13%)</title><rect x="0.1340%" y="581" width="0.1340%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3840%" y="591.50"></text></g><g><title>slatedb::batch::WriteBatch::put_with_options (9 samples, 1.21%)</title><rect x="0.0000%" y="677" width="1.2064%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="9"/><text x="0.2500%" y="687.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (7 samples, 0.94%)</title><rect x="0.2681%" y="661" width="0.9383%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="7"/><text x="0.5181%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.94%)</title><rect x="0.2681%" y="645" width="0.9383%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="7"/><text x="0.5181%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.94%)</title><rect x="0.2681%" y="629" width="0.9383%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="7"/><text x="0.5181%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.94%)</title><rect x="0.2681%" y="613" width="0.9383%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="7"/><text x="0.5181%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.94%)</title><rect x="0.2681%" y="597" width="0.9383%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="7"/><text x="0.5181%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.94%)</title><rect x="0.2681%" y="581" width="0.9383%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="7"/><text x="0.5181%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.94%)</title><rect x="0.2681%" y="565" width="0.9383%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="7"/><text x="0.5181%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7 samples, 0.94%)</title><rect x="0.2681%" y="549" width="0.9383%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="7"/><text x="0.5181%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7 samples, 0.94%)</title><rect x="0.2681%" y="533" width="0.9383%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="7"/><text x="0.5181%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.94%)</title><rect x="0.2681%" y="517" width="0.9383%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="7"/><text x="0.5181%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.94%)</title><rect x="0.2681%" y="501" width="0.9383%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="7"/><text x="0.5181%" y="511.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.94%)</title><rect x="0.2681%" y="485" width="0.9383%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="7"/><text x="0.5181%" y="495.50"></text></g><g><title>__rdl_alloc (7 samples, 0.94%)</title><rect x="0.2681%" y="469" width="0.9383%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="7"/><text x="0.5181%" y="479.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.94%)</title><rect x="0.2681%" y="453" width="0.9383%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="7"/><text x="0.5181%" y="463.50"></text></g><g><title>__libc_malloc (7 samples, 0.94%)</title><rect x="0.2681%" y="437" width="0.9383%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="7"/><text x="0.5181%" y="447.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.27%)</title><rect x="1.2064%" y="645" width="0.2681%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="2"/><text x="1.4564%" y="655.50"></text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::poll_recv (2 samples, 0.27%)</title><rect x="1.2064%" y="629" width="0.2681%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="2"/><text x="1.4564%" y="639.50"></text></g><g><title>tokio::sync::oneshot::State::load (2 samples, 0.27%)</title><rect x="1.2064%" y="613" width="0.2681%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="2"/><text x="1.4564%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.27%)</title><rect x="1.2064%" y="597" width="0.2681%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="2"/><text x="1.4564%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.27%)</title><rect x="1.2064%" y="581" width="0.2681%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="2"/><text x="1.4564%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;&gt; (11 samples, 1.47%)</title><rect x="1.4745%" y="645" width="1.4745%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="11"/><text x="1.7245%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 1.47%)</title><rect x="1.4745%" y="629" width="1.4745%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="11"/><text x="1.7245%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (11 samples, 1.47%)</title><rect x="1.4745%" y="613" width="1.4745%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="11"/><text x="1.7245%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (11 samples, 1.47%)</title><rect x="1.4745%" y="597" width="1.4745%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="11"/><text x="1.7245%" y="607.50"></text></g><g><title>slatedb::db::DbInner::check_error (2 samples, 0.27%)</title><rect x="2.9491%" y="645" width="0.2681%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="2"/><text x="3.1991%" y="655.50"></text></g><g><title>syscall (56 samples, 7.51%)</title><rect x="3.6193%" y="437" width="7.5067%" height="15" fill="rgb(213,181,19)" fg:x="27" fg:w="56"/><text x="3.8693%" y="447.50">syscall</text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1 samples, 0.13%)</title><rect x="11.1260%" y="437" width="0.1340%" height="15" fill="rgb(254,191,54)" fg:x="83" fg:w="1"/><text x="11.3760%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (1 samples, 0.13%)</title><rect x="11.1260%" y="421" width="0.1340%" height="15" fill="rgb(241,83,37)" fg:x="83" fg:w="1"/><text x="11.3760%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.13%)</title><rect x="11.1260%" y="405" width="0.1340%" height="15" fill="rgb(233,36,39)" fg:x="83" fg:w="1"/><text x="11.3760%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.13%)</title><rect x="11.1260%" y="389" width="0.1340%" height="15" fill="rgb(226,3,54)" fg:x="83" fg:w="1"/><text x="11.3760%" y="399.50"></text></g><g><title>tokio::runtime::coop::budget (102 samples, 13.67%)</title><rect x="0.0000%" y="773" width="13.6729%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="102"/><text x="0.2500%" y="783.50">tokio::runtime::coop:..</text></g><g><title>tokio::runtime::coop::with_budget (102 samples, 13.67%)</title><rect x="0.0000%" y="757" width="13.6729%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="102"/><text x="0.2500%" y="767.50">tokio::runtime::coop:..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (102 samples, 13.67%)</title><rect x="0.0000%" y="741" width="13.6729%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="102"/><text x="0.2500%" y="751.50">tokio::runtime::park:..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (102 samples, 13.67%)</title><rect x="0.0000%" y="725" width="13.6729%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="102"/><text x="0.2500%" y="735.50">criterion::bencher::A..</text></g><g><title>db_operations::criterion_benchmark::{{closure}}::{{closure}}::{{closure}} (102 samples, 13.67%)</title><rect x="0.0000%" y="709" width="13.6729%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="102"/><text x="0.2500%" y="719.50">db_operations::criter..</text></g><g><title>slatedb::db::Db::put_with_options::{{closure}} (102 samples, 13.67%)</title><rect x="0.0000%" y="693" width="13.6729%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="102"/><text x="0.2500%" y="703.50">slatedb::db::Db::put_..</text></g><g><title>slatedb::db::Db::write_with_options::{{closure}} (93 samples, 12.47%)</title><rect x="1.2064%" y="677" width="12.4665%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="93"/><text x="1.4564%" y="687.50">slatedb::db::Db::wr..</text></g><g><title>slatedb::db::DbInner::write_with_options::{{closure}} (93 samples, 12.47%)</title><rect x="1.2064%" y="661" width="12.4665%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="93"/><text x="1.4564%" y="671.50">slatedb::db::DbInne..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (78 samples, 10.46%)</title><rect x="3.2172%" y="645" width="10.4558%" height="15" fill="rgb(206,96,30)" fg:x="24" fg:w="78"/><text x="3.4672%" y="655.50">tokio::sync::mp..</text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (78 samples, 10.46%)</title><rect x="3.2172%" y="629" width="10.4558%" height="15" fill="rgb(218,138,4)" fg:x="24" fg:w="78"/><text x="3.4672%" y="639.50">tokio::sync::mp..</text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (78 samples, 10.46%)</title><rect x="3.2172%" y="613" width="10.4558%" height="15" fill="rgb(250,191,14)" fg:x="24" fg:w="78"/><text x="3.4672%" y="623.50">tokio::sync::mp..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (78 samples, 10.46%)</title><rect x="3.2172%" y="597" width="10.4558%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="78"/><text x="3.4672%" y="607.50">tokio::sync::ta..</text></g><g><title>core::task::wake::Waker::wake (78 samples, 10.46%)</title><rect x="3.2172%" y="581" width="10.4558%" height="15" fill="rgb(206,27,48)" fg:x="24" fg:w="78"/><text x="3.4672%" y="591.50">core::task::wak..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (78 samples, 10.46%)</title><rect x="3.2172%" y="565" width="10.4558%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="78"/><text x="3.4672%" y="575.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (78 samples, 10.46%)</title><rect x="3.2172%" y="549" width="10.4558%" height="15" fill="rgb(250,213,24)" fg:x="24" fg:w="78"/><text x="3.4672%" y="559.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (78 samples, 10.46%)</title><rect x="3.2172%" y="533" width="10.4558%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="78"/><text x="3.4672%" y="543.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::raw::schedule (77 samples, 10.32%)</title><rect x="3.3512%" y="517" width="10.3217%" height="15" fill="rgb(231,138,38)" fg:x="25" fg:w="77"/><text x="3.6012%" y="527.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (76 samples, 10.19%)</title><rect x="3.4853%" y="501" width="10.1877%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="76"/><text x="3.7353%" y="511.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (76 samples, 10.19%)</title><rect x="3.4853%" y="485" width="10.1877%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="76"/><text x="3.7353%" y="495.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (76 samples, 10.19%)</title><rect x="3.4853%" y="469" width="10.1877%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="76"/><text x="3.7353%" y="479.50">tokio::runtime:..</text></g><g><title>tokio::runtime::context::with_scheduler (76 samples, 10.19%)</title><rect x="3.4853%" y="453" width="10.1877%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="76"/><text x="3.7353%" y="463.50">tokio::runtime:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (18 samples, 2.41%)</title><rect x="11.2601%" y="437" width="2.4129%" height="15" fill="rgb(209,12,38)" fg:x="84" fg:w="18"/><text x="11.5101%" y="447.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (18 samples, 2.41%)</title><rect x="11.2601%" y="421" width="2.4129%" height="15" fill="rgb(227,1,9)" fg:x="84" fg:w="18"/><text x="11.5101%" y="431.50">to..</text></g><g><title>tokio::runtime::driver::Handle::unpark (18 samples, 2.41%)</title><rect x="11.2601%" y="405" width="2.4129%" height="15" fill="rgb(248,47,43)" fg:x="84" fg:w="18"/><text x="11.5101%" y="415.50">to..</text></g><g><title>tokio::runtime::driver::IoHandle::unpark (18 samples, 2.41%)</title><rect x="11.2601%" y="389" width="2.4129%" height="15" fill="rgb(221,10,30)" fg:x="84" fg:w="18"/><text x="11.5101%" y="399.50">to..</text></g><g><title>tokio::runtime::io::driver::Handle::unpark (18 samples, 2.41%)</title><rect x="11.2601%" y="373" width="2.4129%" height="15" fill="rgb(210,229,1)" fg:x="84" fg:w="18"/><text x="11.5101%" y="383.50">to..</text></g><g><title>mio::waker::Waker::wake (18 samples, 2.41%)</title><rect x="11.2601%" y="357" width="2.4129%" height="15" fill="rgb(222,148,37)" fg:x="84" fg:w="18"/><text x="11.5101%" y="367.50">mi..</text></g><g><title>mio::sys::unix::waker::Waker::wake (18 samples, 2.41%)</title><rect x="11.2601%" y="341" width="2.4129%" height="15" fill="rgb(234,67,33)" fg:x="84" fg:w="18"/><text x="11.5101%" y="351.50">mi..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (18 samples, 2.41%)</title><rect x="11.2601%" y="325" width="2.4129%" height="15" fill="rgb(247,98,35)" fg:x="84" fg:w="18"/><text x="11.5101%" y="335.50">&lt;&amp;..</text></g><g><title>std::sys::pal::unix::fs::File::write (18 samples, 2.41%)</title><rect x="11.2601%" y="309" width="2.4129%" height="15" fill="rgb(247,138,52)" fg:x="84" fg:w="18"/><text x="11.5101%" y="319.50">st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (18 samples, 2.41%)</title><rect x="11.2601%" y="293" width="2.4129%" height="15" fill="rgb(213,79,30)" fg:x="84" fg:w="18"/><text x="11.5101%" y="303.50">st..</text></g><g><title>write (18 samples, 2.41%)</title><rect x="11.2601%" y="277" width="2.4129%" height="15" fill="rgb(246,177,23)" fg:x="84" fg:w="18"/><text x="11.5101%" y="287.50">wr..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (168 samples, 22.52%)</title><rect x="0.0000%" y="1141" width="22.5201%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1151.50">&lt;criterion::routine::Function&lt;M,F,T&gt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (168 samples, 22.52%)</title><rect x="0.0000%" y="1125" width="22.5201%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1135.50">core::iter::traits::iterator::Iterat..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (168 samples, 22.52%)</title><rect x="0.0000%" y="1109" width="22.5201%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1119.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::t..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (168 samples, 22.52%)</title><rect x="0.0000%" y="1093" width="22.5201%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1103.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (168 samples, 22.52%)</title><rect x="0.0000%" y="1077" width="22.5201%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1087.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (168 samples, 22.52%)</title><rect x="0.0000%" y="1061" width="22.5201%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1071.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (168 samples, 22.52%)</title><rect x="0.0000%" y="1045" width="22.5201%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1055.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (168 samples, 22.52%)</title><rect x="0.0000%" y="1029" width="22.5201%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1039.50">core::iter::traits::iterator::Iterat..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (168 samples, 22.52%)</title><rect x="0.0000%" y="1013" width="22.5201%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1023.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (168 samples, 22.52%)</title><rect x="0.0000%" y="997" width="22.5201%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="168"/><text x="0.2500%" y="1007.50">&lt;core::slice::iter::Iter&lt;T&gt; as core:..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (168 samples, 22.52%)</title><rect x="0.0000%" y="981" width="22.5201%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="168"/><text x="0.2500%" y="991.50">core::iter::adapters::map::map_fold:..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (168 samples, 22.52%)</title><rect x="0.0000%" y="965" width="22.5201%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="168"/><text x="0.2500%" y="975.50">&lt;criterion::routine::Function&lt;M,F,T&gt;..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (168 samples, 22.52%)</title><rect x="0.0000%" y="949" width="22.5201%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="168"/><text x="0.2500%" y="959.50">criterion::benchmark_group::Benchmar..</text></g><g><title>db_operations::criterion_benchmark::{{closure}} (168 samples, 22.52%)</title><rect x="0.0000%" y="933" width="22.5201%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="168"/><text x="0.2500%" y="943.50">db_operations::criterion_benchmark::..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (168 samples, 22.52%)</title><rect x="0.0000%" y="917" width="22.5201%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="168"/><text x="0.2500%" y="927.50">criterion::bencher::AsyncBencher&lt;A,M..</text></g><g><title>&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (168 samples, 22.52%)</title><rect x="0.0000%" y="901" width="22.5201%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="168"/><text x="0.2500%" y="911.50">&lt;&amp;tokio::runtime::runtime::Runtime a..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (168 samples, 22.52%)</title><rect x="0.0000%" y="885" width="22.5201%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="168"/><text x="0.2500%" y="895.50">tokio::runtime::runtime::Runtime::bl..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (168 samples, 22.52%)</title><rect x="0.0000%" y="869" width="22.5201%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="168"/><text x="0.2500%" y="879.50">tokio::runtime::runtime::Runtime::bl..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (168 samples, 22.52%)</title><rect x="0.0000%" y="853" width="22.5201%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="168"/><text x="0.2500%" y="863.50">tokio::runtime::scheduler::multi_thr..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (168 samples, 22.52%)</title><rect x="0.0000%" y="837" width="22.5201%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="168"/><text x="0.2500%" y="847.50">tokio::runtime::context::runtime::en..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (168 samples, 22.52%)</title><rect x="0.0000%" y="821" width="22.5201%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="168"/><text x="0.2500%" y="831.50">tokio::runtime::scheduler::multi_thr..</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (168 samples, 22.52%)</title><rect x="0.0000%" y="805" width="22.5201%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="168"/><text x="0.2500%" y="815.50">tokio::runtime::context::blocking::B..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (168 samples, 22.52%)</title><rect x="0.0000%" y="789" width="22.5201%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="168"/><text x="0.2500%" y="799.50">tokio::runtime::park::CachedParkThre..</text></g><g><title>tokio::runtime::park::CachedParkThread::park (66 samples, 8.85%)</title><rect x="13.6729%" y="773" width="8.8472%" height="15" fill="rgb(242,216,29)" fg:x="102" fg:w="66"/><text x="13.9229%" y="783.50">tokio::runti..</text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (66 samples, 8.85%)</title><rect x="13.6729%" y="757" width="8.8472%" height="15" fill="rgb(230,116,27)" fg:x="102" fg:w="66"/><text x="13.9229%" y="767.50">tokio::runti..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (66 samples, 8.85%)</title><rect x="13.6729%" y="741" width="8.8472%" height="15" fill="rgb(228,99,48)" fg:x="102" fg:w="66"/><text x="13.9229%" y="751.50">std::thread:..</text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (66 samples, 8.85%)</title><rect x="13.6729%" y="725" width="8.8472%" height="15" fill="rgb(253,11,6)" fg:x="102" fg:w="66"/><text x="13.9229%" y="735.50">tokio::runti..</text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (66 samples, 8.85%)</title><rect x="13.6729%" y="709" width="8.8472%" height="15" fill="rgb(247,143,39)" fg:x="102" fg:w="66"/><text x="13.9229%" y="719.50">tokio::runti..</text></g><g><title>tokio::runtime::park::Inner::park (66 samples, 8.85%)</title><rect x="13.6729%" y="693" width="8.8472%" height="15" fill="rgb(236,97,10)" fg:x="102" fg:w="66"/><text x="13.9229%" y="703.50">tokio::runti..</text></g><g><title>std::sync::condvar::Condvar::wait (66 samples, 8.85%)</title><rect x="13.6729%" y="677" width="8.8472%" height="15" fill="rgb(233,208,19)" fg:x="102" fg:w="66"/><text x="13.9229%" y="687.50">std::sync::c..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (66 samples, 8.85%)</title><rect x="13.6729%" y="661" width="8.8472%" height="15" fill="rgb(216,164,2)" fg:x="102" fg:w="66"/><text x="13.9229%" y="671.50">std::sys::sy..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (66 samples, 8.85%)</title><rect x="13.6729%" y="645" width="8.8472%" height="15" fill="rgb(220,129,5)" fg:x="102" fg:w="66"/><text x="13.9229%" y="655.50">std::sys::sy..</text></g><g><title>std::sys::pal::unix::futex::futex_wait (66 samples, 8.85%)</title><rect x="13.6729%" y="629" width="8.8472%" height="15" fill="rgb(242,17,10)" fg:x="102" fg:w="66"/><text x="13.9229%" y="639.50">std::sys::pa..</text></g><g><title>syscall (66 samples, 8.85%)</title><rect x="13.6729%" y="613" width="8.8472%" height="15" fill="rgb(242,107,0)" fg:x="102" fg:w="66"/><text x="13.9229%" y="623.50">syscall</text></g><g><title>slatedb::batch::WriteBatch::put_with_options (1 samples, 0.13%)</title><rect x="22.5201%" y="853" width="0.1340%" height="15" fill="rgb(251,28,31)" fg:x="168" fg:w="1"/><text x="22.7701%" y="863.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.13%)</title><rect x="22.5201%" y="837" width="0.1340%" height="15" fill="rgb(233,223,10)" fg:x="168" fg:w="1"/><text x="22.7701%" y="847.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.13%)</title><rect x="22.5201%" y="821" width="0.1340%" height="15" fill="rgb(215,21,27)" fg:x="168" fg:w="1"/><text x="22.7701%" y="831.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (1 samples, 0.13%)</title><rect x="22.5201%" y="805" width="0.1340%" height="15" fill="rgb(232,23,21)" fg:x="168" fg:w="1"/><text x="22.7701%" y="815.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt;::from (1 samples, 0.13%)</title><rect x="22.5201%" y="789" width="0.1340%" height="15" fill="rgb(244,5,23)" fg:x="168" fg:w="1"/><text x="22.7701%" y="799.50"></text></g><g><title>bytes::bytes::ptr_map (1 samples, 0.13%)</title><rect x="22.5201%" y="773" width="0.1340%" height="15" fill="rgb(226,81,46)" fg:x="168" fg:w="1"/><text x="22.7701%" y="783.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt;::from::{{closure}} (1 samples, 0.13%)</title><rect x="22.5201%" y="757" width="0.1340%" height="15" fill="rgb(247,70,30)" fg:x="168" fg:w="1"/><text x="22.7701%" y="767.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.13%)</title><rect x="22.6542%" y="821" width="0.1340%" height="15" fill="rgb(212,68,19)" fg:x="169" fg:w="1"/><text x="22.9042%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::result::Result&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;,slatedb::error::SlateDBError&gt;&gt;&gt;&gt;&gt; (1 samples, 0.13%)</title><rect x="22.6542%" y="805" width="0.1340%" height="15" fill="rgb(240,187,13)" fg:x="169" fg:w="1"/><text x="22.9042%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::sync::oneshot::Inner&lt;core::result::Result&lt;alloc::sync::Arc&lt;slatedb::mem_table::KVTable&gt;,slatedb::error::SlateDBError&gt;&gt;&gt;&gt; (1 samples, 0.13%)</title><rect x="22.6542%" y="789" width="0.1340%" height="15" fill="rgb(223,113,26)" fg:x="169" fg:w="1"/><text x="22.9042%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="22.6542%" y="773" width="0.1340%" height="15" fill="rgb(206,192,2)" fg:x="169" fg:w="1"/><text x="22.9042%" y="783.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="22.6542%" y="757" width="0.1340%" height="15" fill="rgb(241,108,4)" fg:x="169" fg:w="1"/><text x="22.9042%" y="767.50"></text></g><g><title>slatedb::db::DbInner::check_error (1 samples, 0.13%)</title><rect x="22.7882%" y="821" width="0.1340%" height="15" fill="rgb(247,173,49)" fg:x="170" fg:w="1"/><text x="23.0382%" y="831.50"></text></g><g><title>slatedb::utils::WatchableOnceCellReader&lt;T&gt;::read (1 samples, 0.13%)</title><rect x="22.7882%" y="805" width="0.1340%" height="15" fill="rgb(224,114,35)" fg:x="170" fg:w="1"/><text x="23.0382%" y="815.50"></text></g><g><title>tokio::sync::watch::Receiver&lt;T&gt;::borrow (1 samples, 0.13%)</title><rect x="22.7882%" y="789" width="0.1340%" height="15" fill="rgb(245,159,27)" fg:x="170" fg:w="1"/><text x="23.0382%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.13%)</title><rect x="22.7882%" y="773" width="0.1340%" height="15" fill="rgb(245,172,44)" fg:x="170" fg:w="1"/><text x="23.0382%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.13%)</title><rect x="22.7882%" y="757" width="0.1340%" height="15" fill="rgb(236,23,11)" fg:x="170" fg:w="1"/><text x="23.0382%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.13%)</title><rect x="22.7882%" y="741" width="0.1340%" height="15" fill="rgb(205,117,38)" fg:x="170" fg:w="1"/><text x="23.0382%" y="751.50"></text></g><g><title>syscall (14 samples, 1.88%)</title><rect x="22.9223%" y="613" width="1.8767%" height="15" fill="rgb(237,72,25)" fg:x="171" fg:w="14"/><text x="23.1723%" y="623.50">s..</text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (20 samples, 2.68%)</title><rect x="22.9223%" y="805" width="2.6810%" height="15" fill="rgb(244,70,9)" fg:x="171" fg:w="20"/><text x="23.1723%" y="815.50">to..</text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (20 samples, 2.68%)</title><rect x="22.9223%" y="789" width="2.6810%" height="15" fill="rgb(217,125,39)" fg:x="171" fg:w="20"/><text x="23.1723%" y="799.50">to..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (20 samples, 2.68%)</title><rect x="22.9223%" y="773" width="2.6810%" height="15" fill="rgb(235,36,10)" fg:x="171" fg:w="20"/><text x="23.1723%" y="783.50">to..</text></g><g><title>core::task::wake::Waker::wake (20 samples, 2.68%)</title><rect x="22.9223%" y="757" width="2.6810%" height="15" fill="rgb(251,123,47)" fg:x="171" fg:w="20"/><text x="23.1723%" y="767.50">co..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (20 samples, 2.68%)</title><rect x="22.9223%" y="741" width="2.6810%" height="15" fill="rgb(221,13,13)" fg:x="171" fg:w="20"/><text x="23.1723%" y="751.50">to..</text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (20 samples, 2.68%)</title><rect x="22.9223%" y="725" width="2.6810%" height="15" fill="rgb(238,131,9)" fg:x="171" fg:w="20"/><text x="23.1723%" y="735.50">to..</text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (20 samples, 2.68%)</title><rect x="22.9223%" y="709" width="2.6810%" height="15" fill="rgb(211,50,8)" fg:x="171" fg:w="20"/><text x="23.1723%" y="719.50">to..</text></g><g><title>tokio::runtime::task::raw::schedule (20 samples, 2.68%)</title><rect x="22.9223%" y="693" width="2.6810%" height="15" fill="rgb(245,182,24)" fg:x="171" fg:w="20"/><text x="23.1723%" y="703.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (20 samples, 2.68%)</title><rect x="22.9223%" y="677" width="2.6810%" height="15" fill="rgb(242,14,37)" fg:x="171" fg:w="20"/><text x="23.1723%" y="687.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (20 samples, 2.68%)</title><rect x="22.9223%" y="661" width="2.6810%" height="15" fill="rgb(246,228,12)" fg:x="171" fg:w="20"/><text x="23.1723%" y="671.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (20 samples, 2.68%)</title><rect x="22.9223%" y="645" width="2.6810%" height="15" fill="rgb(213,55,15)" fg:x="171" fg:w="20"/><text x="23.1723%" y="655.50">to..</text></g><g><title>tokio::runtime::context::with_scheduler (20 samples, 2.68%)</title><rect x="22.9223%" y="629" width="2.6810%" height="15" fill="rgb(209,9,3)" fg:x="171" fg:w="20"/><text x="23.1723%" y="639.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (6 samples, 0.80%)</title><rect x="24.7989%" y="613" width="0.8043%" height="15" fill="rgb(230,59,30)" fg:x="185" fg:w="6"/><text x="25.0489%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (6 samples, 0.80%)</title><rect x="24.7989%" y="597" width="0.8043%" height="15" fill="rgb(209,121,21)" fg:x="185" fg:w="6"/><text x="25.0489%" y="607.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (6 samples, 0.80%)</title><rect x="24.7989%" y="581" width="0.8043%" height="15" fill="rgb(220,109,13)" fg:x="185" fg:w="6"/><text x="25.0489%" y="591.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (6 samples, 0.80%)</title><rect x="24.7989%" y="565" width="0.8043%" height="15" fill="rgb(232,18,1)" fg:x="185" fg:w="6"/><text x="25.0489%" y="575.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (6 samples, 0.80%)</title><rect x="24.7989%" y="549" width="0.8043%" height="15" fill="rgb(215,41,42)" fg:x="185" fg:w="6"/><text x="25.0489%" y="559.50"></text></g><g><title>mio::waker::Waker::wake (6 samples, 0.80%)</title><rect x="24.7989%" y="533" width="0.8043%" height="15" fill="rgb(224,123,36)" fg:x="185" fg:w="6"/><text x="25.0489%" y="543.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (6 samples, 0.80%)</title><rect x="24.7989%" y="517" width="0.8043%" height="15" fill="rgb(240,125,3)" fg:x="185" fg:w="6"/><text x="25.0489%" y="527.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (6 samples, 0.80%)</title><rect x="24.7989%" y="501" width="0.8043%" height="15" fill="rgb(205,98,50)" fg:x="185" fg:w="6"/><text x="25.0489%" y="511.50"></text></g><g><title>std::sys::pal::unix::fs::File::write (6 samples, 0.80%)</title><rect x="24.7989%" y="485" width="0.8043%" height="15" fill="rgb(205,185,37)" fg:x="185" fg:w="6"/><text x="25.0489%" y="495.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (6 samples, 0.80%)</title><rect x="24.7989%" y="469" width="0.8043%" height="15" fill="rgb(238,207,15)" fg:x="185" fg:w="6"/><text x="25.0489%" y="479.50"></text></g><g><title>write (6 samples, 0.80%)</title><rect x="24.7989%" y="453" width="0.8043%" height="15" fill="rgb(213,199,42)" fg:x="185" fg:w="6"/><text x="25.0489%" y="463.50"></text></g><g><title>tokio::runtime::coop::budget (24 samples, 3.22%)</title><rect x="22.5201%" y="949" width="3.2172%" height="15" fill="rgb(235,201,11)" fg:x="168" fg:w="24"/><text x="22.7701%" y="959.50">tok..</text></g><g><title>tokio::runtime::coop::with_budget (24 samples, 3.22%)</title><rect x="22.5201%" y="933" width="3.2172%" height="15" fill="rgb(207,46,11)" fg:x="168" fg:w="24"/><text x="22.7701%" y="943.50">tok..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (24 samples, 3.22%)</title><rect x="22.5201%" y="917" width="3.2172%" height="15" fill="rgb(241,35,35)" fg:x="168" fg:w="24"/><text x="22.7701%" y="927.50">tok..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter::{{closure}} (24 samples, 3.22%)</title><rect x="22.5201%" y="901" width="3.2172%" height="15" fill="rgb(243,32,47)" fg:x="168" fg:w="24"/><text x="22.7701%" y="911.50">cri..</text></g><g><title>db_operations::criterion_benchmark::{{closure}}::{{closure}}::{{closure}} (24 samples, 3.22%)</title><rect x="22.5201%" y="885" width="3.2172%" height="15" fill="rgb(247,202,23)" fg:x="168" fg:w="24"/><text x="22.7701%" y="895.50">db_..</text></g><g><title>slatedb::db::Db::put_with_options::{{closure}} (24 samples, 3.22%)</title><rect x="22.5201%" y="869" width="3.2172%" height="15" fill="rgb(219,102,11)" fg:x="168" fg:w="24"/><text x="22.7701%" y="879.50">sla..</text></g><g><title>slatedb::db::Db::write_with_options::{{closure}} (23 samples, 3.08%)</title><rect x="22.6542%" y="853" width="3.0831%" height="15" fill="rgb(243,110,44)" fg:x="169" fg:w="23"/><text x="22.9042%" y="863.50">sla..</text></g><g><title>slatedb::db::DbInner::write_with_options::{{closure}} (23 samples, 3.08%)</title><rect x="22.6542%" y="837" width="3.0831%" height="15" fill="rgb(222,74,54)" fg:x="169" fg:w="23"/><text x="22.9042%" y="847.50">sla..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (21 samples, 2.82%)</title><rect x="22.9223%" y="821" width="2.8150%" height="15" fill="rgb(216,99,12)" fg:x="171" fg:w="21"/><text x="23.1723%" y="831.50">to..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::inc_num_messages (1 samples, 0.13%)</title><rect x="25.6032%" y="805" width="0.1340%" height="15" fill="rgb(226,22,26)" fg:x="191" fg:w="1"/><text x="25.8532%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.13%)</title><rect x="25.6032%" y="789" width="0.1340%" height="15" fill="rgb(217,163,10)" fg:x="191" fg:w="1"/><text x="25.8532%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.13%)</title><rect x="25.6032%" y="773" width="0.1340%" height="15" fill="rgb(213,25,53)" fg:x="191" fg:w="1"/><text x="25.8532%" y="783.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (19 samples, 2.55%)</title><rect x="25.7373%" y="805" width="2.5469%" height="15" fill="rgb(252,105,26)" fg:x="192" fg:w="19"/><text x="25.9873%" y="815.50">st..</text></g><g><title>syscall (19 samples, 2.55%)</title><rect x="25.7373%" y="789" width="2.5469%" height="15" fill="rgb(220,39,43)" fg:x="192" fg:w="19"/><text x="25.9873%" y="799.50">sy..</text></g><g><title>db_operations-a (212 samples, 28.42%)</title><rect x="0.0000%" y="1349" width="28.4182%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1359.50">db_operations-a</text></g><g><title>_start (212 samples, 28.42%)</title><rect x="0.0000%" y="1333" width="28.4182%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1343.50">_start</text></g><g><title>__libc_start_main (212 samples, 28.42%)</title><rect x="0.0000%" y="1317" width="28.4182%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1327.50">__libc_start_main</text></g><g><title>main (212 samples, 28.42%)</title><rect x="0.0000%" y="1301" width="28.4182%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1311.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (212 samples, 28.42%)</title><rect x="0.0000%" y="1285" width="28.4182%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1295.50">std::sys::backtrace::__rust_begin_short_backtr..</text></g><g><title>core::ops::function::FnOnce::call_once (212 samples, 28.42%)</title><rect x="0.0000%" y="1269" width="28.4182%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1279.50">core::ops::function::FnOnce::call_once</text></g><g><title>db_operations::main (212 samples, 28.42%)</title><rect x="0.0000%" y="1253" width="28.4182%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1263.50">db_operations::main</text></g><g><title>db_operations::benches (212 samples, 28.42%)</title><rect x="0.0000%" y="1237" width="28.4182%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1247.50">db_operations::benches</text></g><g><title>db_operations::criterion_benchmark (212 samples, 28.42%)</title><rect x="0.0000%" y="1221" width="28.4182%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1231.50">db_operations::criterion_benchmark</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (212 samples, 28.42%)</title><rect x="0.0000%" y="1205" width="28.4182%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1215.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (212 samples, 28.42%)</title><rect x="0.0000%" y="1189" width="28.4182%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1199.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;:..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (212 samples, 28.42%)</title><rect x="0.0000%" y="1173" width="28.4182%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1183.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;:..</text></g><g><title>criterion::routine::Routine::profile (212 samples, 28.42%)</title><rect x="0.0000%" y="1157" width="28.4182%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="212"/><text x="0.2500%" y="1167.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (44 samples, 5.90%)</title><rect x="22.5201%" y="1141" width="5.8981%" height="15" fill="rgb(215,43,3)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1151.50">&lt;criter..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (44 samples, 5.90%)</title><rect x="22.5201%" y="1125" width="5.8981%" height="15" fill="rgb(238,154,13)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1135.50">criteri..</text></g><g><title>db_operations::criterion_benchmark::{{closure}} (44 samples, 5.90%)</title><rect x="22.5201%" y="1109" width="5.8981%" height="15" fill="rgb(219,56,2)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1119.50">db_oper..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (44 samples, 5.90%)</title><rect x="22.5201%" y="1093" width="5.8981%" height="15" fill="rgb(233,0,4)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1103.50">criteri..</text></g><g><title>&lt;&amp;tokio::runtime::runtime::Runtime as criterion::async_executor::AsyncExecutor&gt;::block_on (44 samples, 5.90%)</title><rect x="22.5201%" y="1077" width="5.8981%" height="15" fill="rgb(235,30,7)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1087.50">&lt;&amp;tokio..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (44 samples, 5.90%)</title><rect x="22.5201%" y="1061" width="5.8981%" height="15" fill="rgb(250,79,13)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1071.50">tokio::..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on_inner (44 samples, 5.90%)</title><rect x="22.5201%" y="1045" width="5.8981%" height="15" fill="rgb(211,146,34)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1055.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (44 samples, 5.90%)</title><rect x="22.5201%" y="1029" width="5.8981%" height="15" fill="rgb(228,22,38)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1039.50">tokio::..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (44 samples, 5.90%)</title><rect x="22.5201%" y="1013" width="5.8981%" height="15" fill="rgb(235,168,5)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1023.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::{{closure}} (44 samples, 5.90%)</title><rect x="22.5201%" y="997" width="5.8981%" height="15" fill="rgb(221,155,16)" fg:x="168" fg:w="44"/><text x="22.7701%" y="1007.50">tokio::..</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (44 samples, 5.90%)</title><rect x="22.5201%" y="981" width="5.8981%" height="15" fill="rgb(215,215,53)" fg:x="168" fg:w="44"/><text x="22.7701%" y="991.50">tokio::..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (44 samples, 5.90%)</title><rect x="22.5201%" y="965" width="5.8981%" height="15" fill="rgb(223,4,10)" fg:x="168" fg:w="44"/><text x="22.7701%" y="975.50">tokio::..</text></g><g><title>tokio::runtime::park::CachedParkThread::park (20 samples, 2.68%)</title><rect x="25.7373%" y="949" width="2.6810%" height="15" fill="rgb(234,103,6)" fg:x="192" fg:w="20"/><text x="25.9873%" y="959.50">to..</text></g><g><title>tokio::runtime::park::CachedParkThread::with_current (20 samples, 2.68%)</title><rect x="25.7373%" y="933" width="2.6810%" height="15" fill="rgb(227,97,0)" fg:x="192" fg:w="20"/><text x="25.9873%" y="943.50">to..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 2.68%)</title><rect x="25.7373%" y="917" width="2.6810%" height="15" fill="rgb(234,150,53)" fg:x="192" fg:w="20"/><text x="25.9873%" y="927.50">st..</text></g><g><title>tokio::runtime::park::CachedParkThread::with_current::{{closure}} (20 samples, 2.68%)</title><rect x="25.7373%" y="901" width="2.6810%" height="15" fill="rgb(228,201,54)" fg:x="192" fg:w="20"/><text x="25.9873%" y="911.50">to..</text></g><g><title>tokio::runtime::park::CachedParkThread::park::{{closure}} (20 samples, 2.68%)</title><rect x="25.7373%" y="885" width="2.6810%" height="15" fill="rgb(222,22,37)" fg:x="192" fg:w="20"/><text x="25.9873%" y="895.50">to..</text></g><g><title>tokio::runtime::park::Inner::park (20 samples, 2.68%)</title><rect x="25.7373%" y="869" width="2.6810%" height="15" fill="rgb(237,53,32)" fg:x="192" fg:w="20"/><text x="25.9873%" y="879.50">to..</text></g><g><title>std::sync::condvar::Condvar::wait (20 samples, 2.68%)</title><rect x="25.7373%" y="853" width="2.6810%" height="15" fill="rgb(233,25,53)" fg:x="192" fg:w="20"/><text x="25.9873%" y="863.50">st..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (20 samples, 2.68%)</title><rect x="25.7373%" y="837" width="2.6810%" height="15" fill="rgb(210,40,34)" fg:x="192" fg:w="20"/><text x="25.9873%" y="847.50">st..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (20 samples, 2.68%)</title><rect x="25.7373%" y="821" width="2.6810%" height="15" fill="rgb(241,220,44)" fg:x="192" fg:w="20"/><text x="25.9873%" y="831.50">st..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.13%)</title><rect x="28.2842%" y="805" width="0.1340%" height="15" fill="rgb(235,28,35)" fg:x="211" fg:w="1"/><text x="28.5342%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.13%)</title><rect x="28.2842%" y="789" width="0.1340%" height="15" fill="rgb(210,56,17)" fg:x="211" fg:w="1"/><text x="28.5342%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.13%)</title><rect x="28.2842%" y="773" width="0.1340%" height="15" fill="rgb(224,130,29)" fg:x="211" fg:w="1"/><text x="28.5342%" y="783.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.13%)</title><rect x="28.9544%" y="677" width="0.1340%" height="15" fill="rgb(235,212,8)" fg:x="216" fg:w="1"/><text x="29.2044%" y="687.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.13%)</title><rect x="28.9544%" y="661" width="0.1340%" height="15" fill="rgb(223,33,50)" fg:x="216" fg:w="1"/><text x="29.2044%" y="671.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.13%)</title><rect x="28.9544%" y="645" width="0.1340%" height="15" fill="rgb(219,149,13)" fg:x="216" fg:w="1"/><text x="29.2044%" y="655.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (1 samples, 0.13%)</title><rect x="28.9544%" y="629" width="0.1340%" height="15" fill="rgb(250,156,29)" fg:x="216" fg:w="1"/><text x="29.2044%" y="639.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.13%)</title><rect x="28.9544%" y="613" width="0.1340%" height="15" fill="rgb(216,193,19)" fg:x="216" fg:w="1"/><text x="29.2044%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (5 samples, 0.67%)</title><rect x="29.0885%" y="677" width="0.6702%" height="15" fill="rgb(216,135,14)" fg:x="217" fg:w="5"/><text x="29.3385%" y="687.50"></text></g><g><title>powf32x (5 samples, 0.67%)</title><rect x="29.0885%" y="661" width="0.6702%" height="15" fill="rgb(241,47,5)" fg:x="217" fg:w="5"/><text x="29.3385%" y="671.50"></text></g><g><title>clock_getres (1 samples, 0.13%)</title><rect x="29.7587%" y="629" width="0.1340%" height="15" fill="rgb(233,42,35)" fg:x="222" fg:w="1"/><text x="30.0087%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (9 samples, 1.21%)</title><rect x="28.9544%" y="693" width="1.2064%" height="15" fill="rgb(231,13,6)" fg:x="216" fg:w="9"/><text x="29.2044%" y="703.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.40%)</title><rect x="29.7587%" y="677" width="0.4021%" height="15" fill="rgb(207,181,40)" fg:x="222" fg:w="3"/><text x="30.0087%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (3 samples, 0.40%)</title><rect x="29.7587%" y="661" width="0.4021%" height="15" fill="rgb(254,173,49)" fg:x="222" fg:w="3"/><text x="30.0087%" y="671.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.40%)</title><rect x="29.7587%" y="645" width="0.4021%" height="15" fill="rgb(221,1,38)" fg:x="222" fg:w="3"/><text x="30.0087%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.27%)</title><rect x="29.8928%" y="629" width="0.2681%" height="15" fill="rgb(206,124,46)" fg:x="223" fg:w="2"/><text x="30.1428%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (2 samples, 0.27%)</title><rect x="30.1609%" y="693" width="0.2681%" height="15" fill="rgb(249,21,11)" fg:x="225" fg:w="2"/><text x="30.4109%" y="703.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.27%)</title><rect x="30.1609%" y="677" width="0.2681%" height="15" fill="rgb(222,201,40)" fg:x="225" fg:w="2"/><text x="30.4109%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (2 samples, 0.27%)</title><rect x="30.1609%" y="661" width="0.2681%" height="15" fill="rgb(235,61,29)" fg:x="225" fg:w="2"/><text x="30.4109%" y="671.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.27%)</title><rect x="30.1609%" y="645" width="0.2681%" height="15" fill="rgb(219,207,3)" fg:x="225" fg:w="2"/><text x="30.4109%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.27%)</title><rect x="30.1609%" y="629" width="0.2681%" height="15" fill="rgb(222,56,46)" fg:x="225" fg:w="2"/><text x="30.4109%" y="639.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (113 samples, 15.15%)</title><rect x="31.0992%" y="565" width="15.1475%" height="15" fill="rgb(239,76,54)" fg:x="232" fg:w="113"/><text x="31.3492%" y="575.50">std::sys::pal::unix::fu..</text></g><g><title>syscall (113 samples, 15.15%)</title><rect x="31.0992%" y="549" width="15.1475%" height="15" fill="rgb(231,124,27)" fg:x="232" fg:w="113"/><text x="31.3492%" y="559.50">syscall</text></g><g><title>std::sync::condvar::Condvar::wait (114 samples, 15.28%)</title><rect x="31.0992%" y="613" width="15.2815%" height="15" fill="rgb(249,195,6)" fg:x="232" fg:w="114"/><text x="31.3492%" y="623.50">std::sync::condvar::Con..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (114 samples, 15.28%)</title><rect x="31.0992%" y="597" width="15.2815%" height="15" fill="rgb(237,174,47)" fg:x="232" fg:w="114"/><text x="31.3492%" y="607.50">std::sys::sync::condvar..</text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (114 samples, 15.28%)</title><rect x="31.0992%" y="581" width="15.2815%" height="15" fill="rgb(206,201,31)" fg:x="232" fg:w="114"/><text x="31.3492%" y="591.50">std::sys::sync::condvar..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.13%)</title><rect x="46.2466%" y="565" width="0.1340%" height="15" fill="rgb(231,57,52)" fg:x="345" fg:w="1"/><text x="46.4966%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (1 samples, 0.13%)</title><rect x="46.2466%" y="549" width="0.1340%" height="15" fill="rgb(248,177,22)" fg:x="345" fg:w="1"/><text x="46.4966%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.13%)</title><rect x="46.2466%" y="533" width="0.1340%" height="15" fill="rgb(215,211,37)" fg:x="345" fg:w="1"/><text x="46.4966%" y="543.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (116 samples, 15.55%)</title><rect x="31.0992%" y="629" width="15.5496%" height="15" fill="rgb(241,128,51)" fg:x="232" fg:w="116"/><text x="31.3492%" y="639.50">tokio::runtime::schedule..</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.27%)</title><rect x="46.3807%" y="613" width="0.2681%" height="15" fill="rgb(227,165,31)" fg:x="346" fg:w="2"/><text x="46.6307%" y="623.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.27%)</title><rect x="46.3807%" y="597" width="0.2681%" height="15" fill="rgb(228,167,24)" fg:x="346" fg:w="2"/><text x="46.6307%" y="607.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (2 samples, 0.27%)</title><rect x="46.3807%" y="581" width="0.2681%" height="15" fill="rgb(228,143,12)" fg:x="346" fg:w="2"/><text x="46.6307%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.27%)</title><rect x="46.3807%" y="565" width="0.2681%" height="15" fill="rgb(249,149,8)" fg:x="346" fg:w="2"/><text x="46.6307%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.27%)</title><rect x="46.3807%" y="549" width="0.2681%" height="15" fill="rgb(243,35,44)" fg:x="346" fg:w="2"/><text x="46.6307%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.27%)</title><rect x="46.6488%" y="501" width="0.2681%" height="15" fill="rgb(246,89,9)" fg:x="348" fg:w="2"/><text x="46.8988%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.27%)</title><rect x="46.6488%" y="485" width="0.2681%" height="15" fill="rgb(233,213,13)" fg:x="348" fg:w="2"/><text x="46.8988%" y="495.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_fold::{{closure}} (2 samples, 0.27%)</title><rect x="46.6488%" y="469" width="0.2681%" height="15" fill="rgb(233,141,41)" fg:x="348" fg:w="2"/><text x="46.8988%" y="479.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::{{closure}} (2 samples, 0.27%)</title><rect x="46.6488%" y="453" width="0.2681%" height="15" fill="rgb(239,167,4)" fg:x="348" fg:w="2"/><text x="46.8988%" y="463.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (2 samples, 0.27%)</title><rect x="46.6488%" y="437" width="0.2681%" height="15" fill="rgb(209,217,16)" fg:x="348" fg:w="2"/><text x="46.8988%" y="447.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (2 samples, 0.27%)</title><rect x="46.6488%" y="421" width="0.2681%" height="15" fill="rgb(219,88,35)" fg:x="348" fg:w="2"/><text x="46.8988%" y="431.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.27%)</title><rect x="46.6488%" y="405" width="0.2681%" height="15" fill="rgb(220,193,23)" fg:x="348" fg:w="2"/><text x="46.8988%" y="415.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (2 samples, 0.27%)</title><rect x="46.6488%" y="389" width="0.2681%" height="15" fill="rgb(230,90,52)" fg:x="348" fg:w="2"/><text x="46.8988%" y="399.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (2 samples, 0.27%)</title><rect x="46.6488%" y="373" width="0.2681%" height="15" fill="rgb(252,106,19)" fg:x="348" fg:w="2"/><text x="46.8988%" y="383.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.13%)</title><rect x="46.9169%" y="389" width="0.1340%" height="15" fill="rgb(206,74,20)" fg:x="350" fg:w="1"/><text x="47.1669%" y="399.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (1 samples, 0.13%)</title><rect x="46.9169%" y="373" width="0.1340%" height="15" fill="rgb(230,138,44)" fg:x="350" fg:w="1"/><text x="47.1669%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (1 samples, 0.13%)</title><rect x="46.9169%" y="357" width="0.1340%" height="15" fill="rgb(235,182,43)" fg:x="350" fg:w="1"/><text x="47.1669%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.13%)</title><rect x="46.9169%" y="341" width="0.1340%" height="15" fill="rgb(242,16,51)" fg:x="350" fg:w="1"/><text x="47.1669%" y="351.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (5 samples, 0.67%)</title><rect x="46.6488%" y="565" width="0.6702%" height="15" fill="rgb(248,9,4)" fg:x="348" fg:w="5"/><text x="46.8988%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min (5 samples, 0.67%)</title><rect x="46.6488%" y="549" width="0.6702%" height="15" fill="rgb(210,31,22)" fg:x="348" fg:w="5"/><text x="46.8988%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (5 samples, 0.67%)</title><rect x="46.6488%" y="533" width="0.6702%" height="15" fill="rgb(239,54,39)" fg:x="348" fg:w="5"/><text x="46.8988%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (5 samples, 0.67%)</title><rect x="46.6488%" y="517" width="0.6702%" height="15" fill="rgb(230,99,41)" fg:x="348" fg:w="5"/><text x="46.8988%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.40%)</title><rect x="46.9169%" y="501" width="0.4021%" height="15" fill="rgb(253,106,12)" fg:x="350" fg:w="3"/><text x="47.1669%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3 samples, 0.40%)</title><rect x="46.9169%" y="485" width="0.4021%" height="15" fill="rgb(213,46,41)" fg:x="350" fg:w="3"/><text x="47.1669%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.40%)</title><rect x="46.9169%" y="469" width="0.4021%" height="15" fill="rgb(215,133,35)" fg:x="350" fg:w="3"/><text x="47.1669%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3 samples, 0.40%)</title><rect x="46.9169%" y="453" width="0.4021%" height="15" fill="rgb(213,28,5)" fg:x="350" fg:w="3"/><text x="47.1669%" y="463.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.40%)</title><rect x="46.9169%" y="437" width="0.4021%" height="15" fill="rgb(215,77,49)" fg:x="350" fg:w="3"/><text x="47.1669%" y="447.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time::{{closure}} (3 samples, 0.40%)</title><rect x="46.9169%" y="421" width="0.4021%" height="15" fill="rgb(248,100,22)" fg:x="350" fg:w="3"/><text x="47.1669%" y="431.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (3 samples, 0.40%)</title><rect x="46.9169%" y="405" width="0.4021%" height="15" fill="rgb(208,67,9)" fg:x="350" fg:w="3"/><text x="47.1669%" y="415.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (2 samples, 0.27%)</title><rect x="47.0509%" y="389" width="0.2681%" height="15" fill="rgb(219,133,21)" fg:x="351" fg:w="2"/><text x="47.3009%" y="399.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.27%)</title><rect x="47.0509%" y="373" width="0.2681%" height="15" fill="rgb(246,46,29)" fg:x="351" fg:w="2"/><text x="47.3009%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.13%)</title><rect x="47.4531%" y="501" width="0.1340%" height="15" fill="rgb(246,185,52)" fg:x="354" fg:w="1"/><text x="47.7031%" y="511.50"></text></g><g><title>mio::sys::unix::selector::Selector::select::{{closure}} (1 samples, 0.13%)</title><rect x="47.4531%" y="485" width="0.1340%" height="15" fill="rgb(252,136,11)" fg:x="354" fg:w="1"/><text x="47.7031%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.13%)</title><rect x="47.4531%" y="469" width="0.1340%" height="15" fill="rgb(219,138,53)" fg:x="354" fg:w="1"/><text x="47.7031%" y="479.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (73 samples, 9.79%)</title><rect x="47.3190%" y="549" width="9.7855%" height="15" fill="rgb(211,51,23)" fg:x="353" fg:w="73"/><text x="47.5690%" y="559.50">tokio::runtime..</text></g><g><title>mio::poll::Poll::poll (72 samples, 9.65%)</title><rect x="47.4531%" y="533" width="9.6515%" height="15" fill="rgb(247,221,28)" fg:x="354" fg:w="72"/><text x="47.7031%" y="543.50">mio::poll::Pol..</text></g><g><title>mio::sys::unix::selector::Selector::select (72 samples, 9.65%)</title><rect x="47.4531%" y="517" width="9.6515%" height="15" fill="rgb(251,222,45)" fg:x="354" fg:w="72"/><text x="47.7031%" y="527.50">mio::sys::unix..</text></g><g><title>epoll_wait (71 samples, 9.52%)</title><rect x="47.5871%" y="501" width="9.5174%" height="15" fill="rgb(217,162,53)" fg:x="355" fg:w="71"/><text x="47.8371%" y="511.50">epoll_wait</text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.13%)</title><rect x="57.1046%" y="549" width="0.1340%" height="15" fill="rgb(229,93,14)" fg:x="426" fg:w="1"/><text x="57.3546%" y="559.50"></text></g><g><title>tokio::runtime::io::driver::signal::&lt;impl tokio::runtime::io::driver::Driver&gt;::consume_signal_ready (1 samples, 0.13%)</title><rect x="57.1046%" y="533" width="0.1340%" height="15" fill="rgb(209,67,49)" fg:x="426" fg:w="1"/><text x="57.3546%" y="543.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (2 samples, 0.27%)</title><rect x="57.2386%" y="533" width="0.2681%" height="15" fill="rgb(213,87,29)" fg:x="427" fg:w="2"/><text x="57.4886%" y="543.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.27%)</title><rect x="57.2386%" y="517" width="0.2681%" height="15" fill="rgb(205,151,52)" fg:x="427" fg:w="2"/><text x="57.4886%" y="527.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.27%)</title><rect x="57.2386%" y="501" width="0.2681%" height="15" fill="rgb(253,215,39)" fg:x="427" fg:w="2"/><text x="57.4886%" y="511.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (84 samples, 11.26%)</title><rect x="46.6488%" y="629" width="11.2601%" height="15" fill="rgb(221,220,41)" fg:x="348" fg:w="84"/><text x="46.8988%" y="639.50">tokio::runtime::s..</text></g><g><title>tokio::runtime::driver::Driver::park (84 samples, 11.26%)</title><rect x="46.6488%" y="613" width="11.2601%" height="15" fill="rgb(218,133,21)" fg:x="348" fg:w="84"/><text x="46.8988%" y="623.50">tokio::runtime::d..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (84 samples, 11.26%)</title><rect x="46.6488%" y="597" width="11.2601%" height="15" fill="rgb(221,193,43)" fg:x="348" fg:w="84"/><text x="46.8988%" y="607.50">tokio::runtime::d..</text></g><g><title>tokio::runtime::time::Driver::park (84 samples, 11.26%)</title><rect x="46.6488%" y="581" width="11.2601%" height="15" fill="rgb(240,128,52)" fg:x="348" fg:w="84"/><text x="46.8988%" y="591.50">tokio::runtime::t..</text></g><g><title>tokio::runtime::time::Driver::park_internal (79 samples, 10.59%)</title><rect x="47.3190%" y="565" width="10.5898%" height="15" fill="rgb(253,114,12)" fg:x="353" fg:w="79"/><text x="47.5690%" y="575.50">tokio::runtime:..</text></g><g><title>tokio::runtime::time::source::TimeSource::now (5 samples, 0.67%)</title><rect x="57.2386%" y="549" width="0.6702%" height="15" fill="rgb(215,223,47)" fg:x="427" fg:w="5"/><text x="57.4886%" y="559.50"></text></g><g><title>tokio::time::clock::Clock::now (3 samples, 0.40%)</title><rect x="57.5067%" y="533" width="0.4021%" height="15" fill="rgb(248,225,23)" fg:x="429" fg:w="3"/><text x="57.7567%" y="543.50"></text></g><g><title>tokio::time::clock::now (3 samples, 0.40%)</title><rect x="57.5067%" y="517" width="0.4021%" height="15" fill="rgb(250,108,0)" fg:x="429" fg:w="3"/><text x="57.7567%" y="527.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.40%)</title><rect x="57.5067%" y="501" width="0.4021%" height="15" fill="rgb(228,208,7)" fg:x="429" fg:w="3"/><text x="57.7567%" y="511.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (3 samples, 0.40%)</title><rect x="57.5067%" y="485" width="0.4021%" height="15" fill="rgb(244,45,10)" fg:x="429" fg:w="3"/><text x="57.7567%" y="495.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3 samples, 0.40%)</title><rect x="57.5067%" y="469" width="0.4021%" height="15" fill="rgb(207,125,25)" fg:x="429" fg:w="3"/><text x="57.7567%" y="479.50"></text></g><g><title>clock_gettime (3 samples, 0.40%)</title><rect x="57.5067%" y="453" width="0.4021%" height="15" fill="rgb(210,195,18)" fg:x="429" fg:w="3"/><text x="57.7567%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (202 samples, 27.08%)</title><rect x="31.0992%" y="677" width="27.0777%" height="15" fill="rgb(249,80,12)" fg:x="232" fg:w="202"/><text x="31.3492%" y="687.50">tokio::runtime::scheduler::multi_thread::wo..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (202 samples, 27.08%)</title><rect x="31.0992%" y="661" width="27.0777%" height="15" fill="rgb(221,65,9)" fg:x="232" fg:w="202"/><text x="31.3492%" y="671.50">tokio::runtime::scheduler::multi_thread::pa..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (202 samples, 27.08%)</title><rect x="31.0992%" y="645" width="27.0777%" height="15" fill="rgb(235,49,36)" fg:x="232" fg:w="202"/><text x="31.3492%" y="655.50">tokio::runtime::scheduler::multi_thread::pa..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (2 samples, 0.27%)</title><rect x="57.9088%" y="629" width="0.2681%" height="15" fill="rgb(225,32,20)" fg:x="432" fg:w="2"/><text x="58.1588%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (2 samples, 0.27%)</title><rect x="57.9088%" y="613" width="0.2681%" height="15" fill="rgb(215,141,46)" fg:x="432" fg:w="2"/><text x="58.1588%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.27%)</title><rect x="57.9088%" y="597" width="0.2681%" height="15" fill="rgb(250,160,47)" fg:x="432" fg:w="2"/><text x="58.1588%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.13%)</title><rect x="58.1769%" y="661" width="0.1340%" height="15" fill="rgb(216,222,40)" fg:x="434" fg:w="1"/><text x="58.4269%" y="671.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.13%)</title><rect x="58.1769%" y="645" width="0.1340%" height="15" fill="rgb(234,217,39)" fg:x="434" fg:w="1"/><text x="58.4269%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.13%)</title><rect x="58.1769%" y="629" width="0.1340%" height="15" fill="rgb(207,178,40)" fg:x="434" fg:w="1"/><text x="58.4269%" y="639.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1 samples, 0.13%)</title><rect x="58.1769%" y="613" width="0.1340%" height="15" fill="rgb(221,136,13)" fg:x="434" fg:w="1"/><text x="58.4269%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 0.13%)</title><rect x="58.1769%" y="597" width="0.1340%" height="15" fill="rgb(249,199,10)" fg:x="434" fg:w="1"/><text x="58.4269%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1 samples, 0.13%)</title><rect x="58.1769%" y="581" width="0.1340%" height="15" fill="rgb(249,222,13)" fg:x="434" fg:w="1"/><text x="58.4269%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (212 samples, 28.42%)</title><rect x="30.4290%" y="693" width="28.4182%" height="15" fill="rgb(244,185,38)" fg:x="227" fg:w="212"/><text x="30.6790%" y="703.50">tokio::runtime::scheduler::multi_thread::worke..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (5 samples, 0.67%)</title><rect x="58.1769%" y="677" width="0.6702%" height="15" fill="rgb(236,202,9)" fg:x="434" fg:w="5"/><text x="58.4269%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (4 samples, 0.54%)</title><rect x="58.3110%" y="661" width="0.5362%" height="15" fill="rgb(250,229,37)" fg:x="435" fg:w="4"/><text x="58.5610%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::is_empty (4 samples, 0.54%)</title><rect x="58.3110%" y="645" width="0.5362%" height="15" fill="rgb(206,174,23)" fg:x="435" fg:w="4"/><text x="58.5610%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.54%)</title><rect x="58.3110%" y="629" width="0.5362%" height="15" fill="rgb(211,33,43)" fg:x="435" fg:w="4"/><text x="58.5610%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (4 samples, 0.54%)</title><rect x="58.3110%" y="613" width="0.5362%" height="15" fill="rgb(245,58,50)" fg:x="435" fg:w="4"/><text x="58.5610%" y="623.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.54%)</title><rect x="58.3110%" y="597" width="0.5362%" height="15" fill="rgb(244,68,36)" fg:x="435" fg:w="4"/><text x="58.5610%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (1 samples, 0.13%)</title><rect x="59.1153%" y="405" width="0.1340%" height="15" fill="rgb(232,229,15)" fg:x="441" fg:w="1"/><text x="59.3653%" y="415.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="59.1153%" y="389" width="0.1340%" height="15" fill="rgb(254,30,23)" fg:x="441" fg:w="1"/><text x="59.3653%" y="399.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (1 samples, 0.13%)</title><rect x="59.1153%" y="373" width="0.1340%" height="15" fill="rgb(235,160,14)" fg:x="441" fg:w="1"/><text x="59.3653%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.13%)</title><rect x="59.1153%" y="357" width="0.1340%" height="15" fill="rgb(212,155,44)" fg:x="441" fg:w="1"/><text x="59.3653%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.13%)</title><rect x="59.1153%" y="341" width="0.1340%" height="15" fill="rgb(226,2,50)" fg:x="441" fg:w="1"/><text x="59.3653%" y="351.50"></text></g><g><title>tokio::runtime::context::CONTEXT::{{constant}}::{{closure}} (1 samples, 0.13%)</title><rect x="59.1153%" y="325" width="0.1340%" height="15" fill="rgb(234,177,6)" fg:x="441" fg:w="1"/><text x="59.3653%" y="335.50"></text></g><g><title>std::sys::thread_local::native::eager::Storage&lt;T&gt;::get (1 samples, 0.13%)</title><rect x="59.1153%" y="309" width="0.1340%" height="15" fill="rgb(217,24,9)" fg:x="441" fg:w="1"/><text x="59.3653%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.13%)</title><rect x="59.1153%" y="293" width="0.1340%" height="15" fill="rgb(220,13,46)" fg:x="441" fg:w="1"/><text x="59.3653%" y="303.50"></text></g><g><title>&lt;slatedb::config::SystemClock as slatedb::config::Clock&gt;::now (1 samples, 0.13%)</title><rect x="59.2493%" y="373" width="0.1340%" height="15" fill="rgb(239,221,27)" fg:x="442" fg:w="1"/><text x="59.4993%" y="383.50"></text></g><g><title>std::time::SystemTime::now (1 samples, 0.13%)</title><rect x="59.2493%" y="357" width="0.1340%" height="15" fill="rgb(222,198,25)" fg:x="442" fg:w="1"/><text x="59.4993%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (1 samples, 0.13%)</title><rect x="59.2493%" y="341" width="0.1340%" height="15" fill="rgb(211,99,13)" fg:x="442" fg:w="1"/><text x="59.4993%" y="351.50"></text></g><g><title>&lt;std::thread::local::AccessError as core::fmt::Debug&gt;::fmt (1 samples, 0.13%)</title><rect x="59.2493%" y="325" width="0.1340%" height="15" fill="rgb(232,111,31)" fg:x="442" fg:w="1"/><text x="59.4993%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;slatedb::batch::WriteOp,alloc::alloc::Global&gt;&gt; (3 samples, 0.40%)</title><rect x="59.3834%" y="341" width="0.4021%" height="15" fill="rgb(245,82,37)" fg:x="443" fg:w="3"/><text x="59.6334%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.40%)</title><rect x="59.3834%" y="325" width="0.4021%" height="15" fill="rgb(227,149,46)" fg:x="443" fg:w="3"/><text x="59.6334%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;slatedb::batch::WriteOp&gt;&gt; (3 samples, 0.40%)</title><rect x="59.3834%" y="309" width="0.4021%" height="15" fill="rgb(218,36,50)" fg:x="443" fg:w="3"/><text x="59.6334%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.40%)</title><rect x="59.3834%" y="293" width="0.4021%" height="15" fill="rgb(226,80,48)" fg:x="443" fg:w="3"/><text x="59.6334%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3 samples, 0.40%)</title><rect x="59.3834%" y="277" width="0.4021%" height="15" fill="rgb(238,224,15)" fg:x="443" fg:w="3"/><text x="59.6334%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.40%)</title><rect x="59.3834%" y="261" width="0.4021%" height="15" fill="rgb(241,136,10)" fg:x="443" fg:w="3"/><text x="59.6334%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.40%)</title><rect x="59.3834%" y="245" width="0.4021%" height="15" fill="rgb(208,32,45)" fg:x="443" fg:w="3"/><text x="59.6334%" y="255.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.40%)</title><rect x="59.3834%" y="229" width="0.4021%" height="15" fill="rgb(207,135,9)" fg:x="443" fg:w="3"/><text x="59.6334%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.40%)</title><rect x="59.3834%" y="213" width="0.4021%" height="15" fill="rgb(206,86,44)" fg:x="443" fg:w="3"/><text x="59.6334%" y="223.50"></text></g><g><title>cfree (3 samples, 0.40%)</title><rect x="59.3834%" y="197" width="0.4021%" height="15" fill="rgb(245,177,15)" fg:x="443" fg:w="3"/><text x="59.6334%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;slatedb::batch::WriteOp&gt;&gt; (5 samples, 0.67%)</title><rect x="59.3834%" y="373" width="0.6702%" height="15" fill="rgb(206,64,50)" fg:x="443" fg:w="5"/><text x="59.6334%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.67%)</title><rect x="59.3834%" y="357" width="0.6702%" height="15" fill="rgb(234,36,40)" fg:x="443" fg:w="5"/><text x="59.6334%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[slatedb::batch::WriteOp]&gt; (2 samples, 0.27%)</title><rect x="59.7855%" y="341" width="0.2681%" height="15" fill="rgb(213,64,8)" fg:x="446" fg:w="2"/><text x="60.0355%" y="351.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (3 samples, 0.40%)</title><rect x="60.0536%" y="373" width="0.4021%" height="15" fill="rgb(210,75,36)" fg:x="448" fg:w="3"/><text x="60.3036%" y="383.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (3 samples, 0.40%)</title><rect x="60.0536%" y="357" width="0.4021%" height="15" fill="rgb(229,88,21)" fg:x="448" fg:w="3"/><text x="60.3036%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (3 samples, 0.40%)</title><rect x="60.0536%" y="341" width="0.4021%" height="15" fill="rgb(252,204,47)" fg:x="448" fg:w="3"/><text x="60.3036%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.40%)</title><rect x="60.0536%" y="325" width="0.4021%" height="15" fill="rgb(208,77,27)" fg:x="448" fg:w="3"/><text x="60.3036%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="60.5898%" y="309" width="0.1340%" height="15" fill="rgb(221,76,26)" fg:x="452" fg:w="1"/><text x="60.8398%" y="319.50"></text></g><g><title>slatedb::db_state::DbState::state_copy (4 samples, 0.54%)</title><rect x="60.4558%" y="357" width="0.5362%" height="15" fill="rgb(225,139,18)" fg:x="451" fg:w="4"/><text x="60.7058%" y="367.50"></text></g><g><title>&lt;slatedb::db_state::COWDbState as core::clone::Clone&gt;::clone (4 samples, 0.54%)</title><rect x="60.4558%" y="341" width="0.5362%" height="15" fill="rgb(230,137,11)" fg:x="451" fg:w="4"/><text x="60.7058%" y="351.50"></text></g><g><title>&lt;slatedb::db_state::CoreDbState as core::clone::Clone&gt;::clone (4 samples, 0.54%)</title><rect x="60.4558%" y="325" width="0.5362%" height="15" fill="rgb(212,28,1)" fg:x="451" fg:w="4"/><text x="60.7058%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.27%)</title><rect x="60.7239%" y="309" width="0.2681%" height="15" fill="rgb(248,164,17)" fg:x="453" fg:w="2"/><text x="60.9739%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5 samples, 0.67%)</title><rect x="60.9920%" y="341" width="0.6702%" height="15" fill="rgb(222,171,42)" fg:x="455" fg:w="5"/><text x="61.2420%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::sync::Arc&lt;slatedb::mem_table::ImmutableMemtable&gt;&gt;&gt; (2 samples, 0.27%)</title><rect x="61.6622%" y="277" width="0.2681%" height="15" fill="rgb(243,84,45)" fg:x="460" fg:w="2"/><text x="61.9122%" y="287.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.27%)</title><rect x="61.6622%" y="261" width="0.2681%" height="15" fill="rgb(252,49,23)" fg:x="460" fg:w="2"/><text x="61.9122%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (2 samples, 0.27%)</title><rect x="61.6622%" y="245" width="0.2681%" height="15" fill="rgb(215,19,7)" fg:x="460" fg:w="2"/><text x="61.9122%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.40%)</title><rect x="61.6622%" y="309" width="0.4021%" height="15" fill="rgb(238,81,41)" fg:x="460" fg:w="3"/><text x="61.9122%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::db_state::COWDbState&gt; (3 samples, 0.40%)</title><rect x="61.6622%" y="293" width="0.4021%" height="15" fill="rgb(210,199,37)" fg:x="460" fg:w="3"/><text x="61.9122%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::db_state::CoreDbState&gt; (1 samples, 0.13%)</title><rect x="61.9303%" y="277" width="0.1340%" height="15" fill="rgb(244,192,49)" fg:x="462" fg:w="1"/><text x="62.1803%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;slatedb::db_state::SsTableHandle&gt;&gt; (1 samples, 0.13%)</title><rect x="61.9303%" y="261" width="0.1340%" height="15" fill="rgb(226,211,11)" fg:x="462" fg:w="1"/><text x="62.1803%" y="271.50"></text></g><g><title>slatedb::db_state::DbState::update_clock_tick (15 samples, 2.01%)</title><rect x="60.4558%" y="373" width="2.0107%" height="15" fill="rgb(236,162,54)" fg:x="451" fg:w="15"/><text x="60.7058%" y="383.50">s..</text></g><g><title>slatedb::db_state::DbState::update_state (11 samples, 1.47%)</title><rect x="60.9920%" y="357" width="1.4745%" height="15" fill="rgb(220,229,9)" fg:x="455" fg:w="11"/><text x="61.2420%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;slatedb::db_state::COWDbState&gt;&gt; (6 samples, 0.80%)</title><rect x="61.6622%" y="341" width="0.8043%" height="15" fill="rgb(250,87,22)" fg:x="460" fg:w="6"/><text x="61.9122%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.80%)</title><rect x="61.6622%" y="325" width="0.8043%" height="15" fill="rgb(239,43,17)" fg:x="460" fg:w="6"/><text x="61.9122%" y="335.50"></text></g><g><title>cfree (3 samples, 0.40%)</title><rect x="62.0643%" y="309" width="0.4021%" height="15" fill="rgb(231,177,25)" fg:x="463" fg:w="3"/><text x="62.3143%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.27%)</title><rect x="62.6005%" y="101" width="0.2681%" height="15" fill="rgb(219,179,1)" fg:x="467" fg:w="2"/><text x="62.8505%" y="111.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.27%)</title><rect x="62.6005%" y="85" width="0.2681%" height="15" fill="rgb(238,219,53)" fg:x="467" fg:w="2"/><text x="62.8505%" y="95.50"></text></g><g><title>cfree (2 samples, 0.27%)</title><rect x="62.6005%" y="69" width="0.2681%" height="15" fill="rgb(232,167,36)" fg:x="467" fg:w="2"/><text x="62.8505%" y="79.50"></text></g><g><title>crossbeam_epoch::default::pin (4 samples, 0.54%)</title><rect x="62.4665%" y="325" width="0.5362%" height="15" fill="rgb(244,19,51)" fg:x="466" fg:w="4"/><text x="62.7165%" y="335.50"></text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 0.54%)</title><rect x="62.4665%" y="309" width="0.5362%" height="15" fill="rgb(224,6,22)" fg:x="466" fg:w="4"/><text x="62.7165%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.54%)</title><rect x="62.4665%" y="293" width="0.5362%" height="15" fill="rgb(224,145,5)" fg:x="466" fg:w="4"/><text x="62.7165%" y="303.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (4 samples, 0.54%)</title><rect x="62.4665%" y="277" width="0.5362%" height="15" fill="rgb(234,130,49)" fg:x="466" fg:w="4"/><text x="62.7165%" y="287.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (4 samples, 0.54%)</title><rect x="62.4665%" y="261" width="0.5362%" height="15" fill="rgb(254,6,2)" fg:x="466" fg:w="4"/><text x="62.7165%" y="271.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (4 samples, 0.54%)</title><rect x="62.4665%" y="245" width="0.5362%" height="15" fill="rgb(208,96,46)" fg:x="466" fg:w="4"/><text x="62.7165%" y="255.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (4 samples, 0.54%)</title><rect x="62.4665%" y="229" width="0.5362%" height="15" fill="rgb(239,3,39)" fg:x="466" fg:w="4"/><text x="62.7165%" y="239.50"></text></g><g><title>crossbeam_epoch::internal::Global::collect (4 samples, 0.54%)</title><rect x="62.4665%" y="213" width="0.5362%" height="15" fill="rgb(233,210,1)" fg:x="466" fg:w="4"/><text x="62.7165%" y="223.50"></text></g><g><title>core::mem::drop (4 samples, 0.54%)</title><rect x="62.4665%" y="197" width="0.5362%" height="15" fill="rgb(244,137,37)" fg:x="466" fg:w="4"/><text x="62.7165%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::SealedBag&gt; (4 samples, 0.54%)</title><rect x="62.4665%" y="181" width="0.5362%" height="15" fill="rgb(240,136,2)" fg:x="466" fg:w="4"/><text x="62.7165%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_epoch::internal::Bag&gt; (4 samples, 0.54%)</title><rect x="62.4665%" y="165" width="0.5362%" height="15" fill="rgb(239,18,37)" fg:x="466" fg:w="4"/><text x="62.7165%" y="175.50"></text></g><g><title>&lt;crossbeam_epoch::internal::Bag as core::ops::drop::Drop&gt;::drop (4 samples, 0.54%)</title><rect x="62.4665%" y="149" width="0.5362%" height="15" fill="rgb(218,185,22)" fg:x="466" fg:w="4"/><text x="62.7165%" y="159.50"></text></g><g><title>crossbeam_epoch::deferred::Deferred::call (4 samples, 0.54%)</title><rect x="62.4665%" y="133" width="0.5362%" height="15" fill="rgb(225,218,4)" fg:x="466" fg:w="4"/><text x="62.7165%" y="143.50"></text></g><g><title>crossbeam_skiplist::base::Node&lt;K,V&gt;::finalize (3 samples, 0.40%)</title><rect x="62.6005%" y="117" width="0.4021%" height="15" fill="rgb(230,182,32)" fg:x="467" fg:w="3"/><text x="62.8505%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::mem_table::ValueWithAttributes&gt; (1 samples, 0.13%)</title><rect x="62.8686%" y="101" width="0.1340%" height="15" fill="rgb(242,56,43)" fg:x="469" fg:w="1"/><text x="63.1186%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;slatedb::types::ValueDeletable&gt; (1 samples, 0.13%)</title><rect x="62.8686%" y="85" width="0.1340%" height="15" fill="rgb(233,99,24)" fg:x="469" fg:w="1"/><text x="63.1186%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.13%)</title><rect x="62.8686%" y="69" width="0.1340%" height="15" fill="rgb(234,209,42)" fg:x="469" fg:w="1"/><text x="63.1186%" y="79.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="62.8686%" y="53" width="0.1340%" height="15" fill="rgb(227,7,12)" fg:x="469" fg:w="1"/><text x="63.1186%" y="63.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="62.8686%" y="37" width="0.1340%" height="15" fill="rgb(245,203,43)" fg:x="469" fg:w="1"/><text x="63.1186%" y="47.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.54%)</title><rect x="63.5389%" y="293" width="0.5362%" height="15" fill="rgb(238,205,33)" fg:x="474" fg:w="4"/><text x="63.7889%" y="303.50"></text></g><g><title>core::ptr::write (4 samples, 0.54%)</title><rect x="63.5389%" y="277" width="0.5362%" height="15" fill="rgb(231,56,7)" fg:x="474" fg:w="4"/><text x="63.7889%" y="287.50"></text></g><g><title>crossbeam_skiplist::base::Node&lt;K,V&gt;::alloc (6 samples, 0.80%)</title><rect x="64.0751%" y="293" width="0.8043%" height="15" fill="rgb(244,186,29)" fg:x="478" fg:w="6"/><text x="64.3251%" y="303.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.80%)</title><rect x="64.0751%" y="277" width="0.8043%" height="15" fill="rgb(234,111,31)" fg:x="478" fg:w="6"/><text x="64.3251%" y="287.50"></text></g><g><title>__rdl_alloc (6 samples, 0.80%)</title><rect x="64.0751%" y="261" width="0.8043%" height="15" fill="rgb(241,149,10)" fg:x="478" fg:w="6"/><text x="64.3251%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.80%)</title><rect x="64.0751%" y="245" width="0.8043%" height="15" fill="rgb(249,206,44)" fg:x="478" fg:w="6"/><text x="64.3251%" y="255.50"></text></g><g><title>__libc_malloc (6 samples, 0.80%)</title><rect x="64.0751%" y="229" width="0.8043%" height="15" fill="rgb(251,153,30)" fg:x="478" fg:w="6"/><text x="64.3251%" y="239.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::Ord&gt;::cmp (6 samples, 0.80%)</title><rect x="65.2815%" y="277" width="0.8043%" height="15" fill="rgb(239,152,38)" fg:x="487" fg:w="6"/><text x="65.5315%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (6 samples, 0.80%)</title><rect x="65.2815%" y="261" width="0.8043%" height="15" fill="rgb(249,139,47)" fg:x="487" fg:w="6"/><text x="65.5315%" y="271.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (6 samples, 0.80%)</title><rect x="65.2815%" y="245" width="0.8043%" height="15" fill="rgb(244,64,35)" fg:x="487" fg:w="6"/><text x="65.5315%" y="255.50"></text></g><g><title>slatedb::batch_write::&lt;impl slatedb::db::DbInner&gt;::write_batch::{{closure}} (52 samples, 6.97%)</title><rect x="59.2493%" y="389" width="6.9705%" height="15" fill="rgb(216,46,15)" fg:x="442" fg:w="52"/><text x="59.4993%" y="399.50">slatedb::..</text></g><g><title>slatedb::mem_table::WritableKVTable::put (28 samples, 3.75%)</title><rect x="62.4665%" y="373" width="3.7534%" height="15" fill="rgb(250,74,19)" fg:x="466" fg:w="28"/><text x="62.7165%" y="383.50">slat..</text></g><g><title>slatedb::mem_table::KVTable::put_or_delete (28 samples, 3.75%)</title><rect x="62.4665%" y="357" width="3.7534%" height="15" fill="rgb(249,42,33)" fg:x="466" fg:w="28"/><text x="62.7165%" y="367.50">slat..</text></g><g><title>crossbeam_skiplist::map::SkipMap&lt;K,V&gt;::compare_insert (28 samples, 3.75%)</title><rect x="62.4665%" y="341" width="3.7534%" height="15" fill="rgb(242,149,17)" fg:x="466" fg:w="28"/><text x="62.7165%" y="351.50">cros..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::compare_insert (24 samples, 3.22%)</title><rect x="63.0027%" y="325" width="3.2172%" height="15" fill="rgb(244,29,21)" fg:x="470" fg:w="24"/><text x="63.2527%" y="335.50">cro..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::insert_internal (24 samples, 3.22%)</title><rect x="63.0027%" y="309" width="3.2172%" height="15" fill="rgb(220,130,37)" fg:x="470" fg:w="24"/><text x="63.2527%" y="319.50">cro..</text></g><g><title>crossbeam_skiplist::base::SkipList&lt;K,V&gt;::search_position (10 samples, 1.34%)</title><rect x="64.8794%" y="293" width="1.3405%" height="15" fill="rgb(211,67,2)" fg:x="484" fg:w="10"/><text x="65.1294%" y="303.50"></text></g><g><title>crossbeam_epoch::atomic::Atomic&lt;T&gt;::load_consume (1 samples, 0.13%)</title><rect x="66.0858%" y="277" width="0.1340%" height="15" fill="rgb(235,68,52)" fg:x="493" fg:w="1"/><text x="66.3358%" y="287.50"></text></g><g><title>&lt;core::sync::atomic::AtomicUsize as crossbeam_utils::atomic::consume::AtomicConsume&gt;::load_consume (1 samples, 0.13%)</title><rect x="66.0858%" y="261" width="0.1340%" height="15" fill="rgb(246,142,3)" fg:x="493" fg:w="1"/><text x="66.3358%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.13%)</title><rect x="66.0858%" y="245" width="0.1340%" height="15" fill="rgb(241,25,7)" fg:x="493" fg:w="1"/><text x="66.3358%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.13%)</title><rect x="66.0858%" y="229" width="0.1340%" height="15" fill="rgb(242,119,39)" fg:x="493" fg:w="1"/><text x="66.3358%" y="239.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (2 samples, 0.27%)</title><rect x="66.2198%" y="389" width="0.2681%" height="15" fill="rgb(241,98,45)" fg:x="494" fg:w="2"/><text x="66.4698%" y="399.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.27%)</title><rect x="66.2198%" y="373" width="0.2681%" height="15" fill="rgb(254,28,30)" fg:x="494" fg:w="2"/><text x="66.4698%" y="383.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (2 samples, 0.27%)</title><rect x="66.2198%" y="357" width="0.2681%" height="15" fill="rgb(241,142,54)" fg:x="494" fg:w="2"/><text x="66.4698%" y="367.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (2 samples, 0.27%)</title><rect x="66.2198%" y="341" width="0.2681%" height="15" fill="rgb(222,85,15)" fg:x="494" fg:w="2"/><text x="66.4698%" y="351.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (2 samples, 0.27%)</title><rect x="66.2198%" y="325" width="0.2681%" height="15" fill="rgb(210,85,47)" fg:x="494" fg:w="2"/><text x="66.4698%" y="335.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.27%)</title><rect x="66.2198%" y="309" width="0.2681%" height="15" fill="rgb(224,206,25)" fg:x="494" fg:w="2"/><text x="66.4698%" y="319.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (2 samples, 0.27%)</title><rect x="66.2198%" y="293" width="0.2681%" height="15" fill="rgb(243,201,19)" fg:x="494" fg:w="2"/><text x="66.4698%" y="303.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (2 samples, 0.27%)</title><rect x="66.2198%" y="277" width="0.2681%" height="15" fill="rgb(236,59,4)" fg:x="494" fg:w="2"/><text x="66.4698%" y="287.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (2 samples, 0.27%)</title><rect x="66.2198%" y="261" width="0.2681%" height="15" fill="rgb(254,179,45)" fg:x="494" fg:w="2"/><text x="66.4698%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2 samples, 0.27%)</title><rect x="66.2198%" y="245" width="0.2681%" height="15" fill="rgb(226,14,10)" fg:x="494" fg:w="2"/><text x="66.4698%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.27%)</title><rect x="66.2198%" y="229" width="0.2681%" height="15" fill="rgb(244,27,41)" fg:x="494" fg:w="2"/><text x="66.4698%" y="239.50"></text></g><g><title>tokio::sync::oneshot::State::set_complete (2 samples, 0.27%)</title><rect x="66.4879%" y="357" width="0.2681%" height="15" fill="rgb(235,35,32)" fg:x="496" fg:w="2"/><text x="66.7379%" y="367.50"></text></g><g><title>tokio::sync::oneshot::State::is_closed (2 samples, 0.27%)</title><rect x="66.4879%" y="341" width="0.2681%" height="15" fill="rgb(218,68,31)" fg:x="496" fg:w="2"/><text x="66.7379%" y="351.50"></text></g><g><title>syscall (112 samples, 15.01%)</title><rect x="66.7560%" y="277" width="15.0134%" height="15" fill="rgb(207,120,37)" fg:x="498" fg:w="112"/><text x="67.0060%" y="287.50">syscall</text></g><g><title>tokio::runtime::coop::budget (172 samples, 23.06%)</title><rect x="58.8472%" y="677" width="23.0563%" height="15" fill="rgb(227,98,0)" fg:x="439" fg:w="172"/><text x="59.0972%" y="687.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (172 samples, 23.06%)</title><rect x="58.8472%" y="661" width="23.0563%" height="15" fill="rgb(207,7,3)" fg:x="439" fg:w="172"/><text x="59.0972%" y="671.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (172 samples, 23.06%)</title><rect x="58.8472%" y="645" width="23.0563%" height="15" fill="rgb(206,98,19)" fg:x="439" fg:w="172"/><text x="59.0972%" y="655.50">tokio::runtime::scheduler::multi_thre..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (172 samples, 23.06%)</title><rect x="58.8472%" y="629" width="23.0563%" height="15" fill="rgb(217,5,26)" fg:x="439" fg:w="172"/><text x="59.0972%" y="639.50">tokio::runtime::task::LocalNotified&lt;S..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (172 samples, 23.06%)</title><rect x="58.8472%" y="613" width="23.0563%" height="15" fill="rgb(235,190,38)" fg:x="439" fg:w="172"/><text x="59.0972%" y="623.50">tokio::runtime::task::raw::RawTask::p..</text></g><g><title>tokio::runtime::task::raw::poll (171 samples, 22.92%)</title><rect x="58.9812%" y="597" width="22.9223%" height="15" fill="rgb(247,86,24)" fg:x="440" fg:w="171"/><text x="59.2312%" y="607.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (170 samples, 22.79%)</title><rect x="59.1153%" y="581" width="22.7882%" height="15" fill="rgb(205,101,16)" fg:x="441" fg:w="170"/><text x="59.3653%" y="591.50">tokio::runtime::task::harness::Harne..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (170 samples, 22.79%)</title><rect x="59.1153%" y="565" width="22.7882%" height="15" fill="rgb(246,168,33)" fg:x="441" fg:w="170"/><text x="59.3653%" y="575.50">tokio::runtime::task::harness::Harne..</text></g><g><title>tokio::runtime::task::harness::poll_future (170 samples, 22.79%)</title><rect x="59.1153%" y="549" width="22.7882%" height="15" fill="rgb(231,114,1)" fg:x="441" fg:w="170"/><text x="59.3653%" y="559.50">tokio::runtime::task::harness::poll_..</text></g><g><title>std::panic::catch_unwind (170 samples, 22.79%)</title><rect x="59.1153%" y="533" width="22.7882%" height="15" fill="rgb(207,184,53)" fg:x="441" fg:w="170"/><text x="59.3653%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (170 samples, 22.79%)</title><rect x="59.1153%" y="517" width="22.7882%" height="15" fill="rgb(224,95,51)" fg:x="441" fg:w="170"/><text x="59.3653%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (170 samples, 22.79%)</title><rect x="59.1153%" y="501" width="22.7882%" height="15" fill="rgb(212,188,45)" fg:x="441" fg:w="170"/><text x="59.3653%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (170 samples, 22.79%)</title><rect x="59.1153%" y="485" width="22.7882%" height="15" fill="rgb(223,154,38)" fg:x="441" fg:w="170"/><text x="59.3653%" y="495.50">&lt;core::panic::unwind_safe::AssertUnw..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (170 samples, 22.79%)</title><rect x="59.1153%" y="469" width="22.7882%" height="15" fill="rgb(251,22,52)" fg:x="441" fg:w="170"/><text x="59.3653%" y="479.50">tokio::runtime::task::harness::poll_..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (170 samples, 22.79%)</title><rect x="59.1153%" y="453" width="22.7882%" height="15" fill="rgb(229,209,22)" fg:x="441" fg:w="170"/><text x="59.3653%" y="463.50">tokio::runtime::task::core::Core&lt;T,S..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (170 samples, 22.79%)</title><rect x="59.1153%" y="437" width="22.7882%" height="15" fill="rgb(234,138,34)" fg:x="441" fg:w="170"/><text x="59.3653%" y="447.50">tokio::loom::std::unsafe_cell::Unsaf..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (170 samples, 22.79%)</title><rect x="59.1153%" y="421" width="22.7882%" height="15" fill="rgb(212,95,11)" fg:x="441" fg:w="170"/><text x="59.3653%" y="431.50">tokio::runtime::task::core::Core&lt;T,S..</text></g><g><title>slatedb::batch_write::&lt;impl slatedb::db::DbInner&gt;::spawn_write_task::{{closure}} (169 samples, 22.65%)</title><rect x="59.2493%" y="405" width="22.6542%" height="15" fill="rgb(240,179,47)" fg:x="442" fg:w="169"/><text x="59.4993%" y="415.50">slatedb::batch_write::&lt;impl slatedb:..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (115 samples, 15.42%)</title><rect x="66.4879%" y="389" width="15.4155%" height="15" fill="rgb(240,163,11)" fg:x="496" fg:w="115"/><text x="66.7379%" y="399.50">tokio::sync::oneshot::Se..</text></g><g><title>tokio::sync::oneshot::Inner&lt;T&gt;::complete (115 samples, 15.42%)</title><rect x="66.4879%" y="373" width="15.4155%" height="15" fill="rgb(236,37,12)" fg:x="496" fg:w="115"/><text x="66.7379%" y="383.50">tokio::sync::oneshot::In..</text></g><g><title>tokio::sync::oneshot::Task::with_task (113 samples, 15.15%)</title><rect x="66.7560%" y="357" width="15.1475%" height="15" fill="rgb(232,164,16)" fg:x="498" fg:w="113"/><text x="67.0060%" y="367.50">tokio::sync::oneshot::T..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (113 samples, 15.15%)</title><rect x="66.7560%" y="341" width="15.1475%" height="15" fill="rgb(244,205,15)" fg:x="498" fg:w="113"/><text x="67.0060%" y="351.50">tokio::loom::std::unsaf..</text></g><g><title>tokio::sync::oneshot::Task::with_task::{{closure}} (113 samples, 15.15%)</title><rect x="66.7560%" y="325" width="15.1475%" height="15" fill="rgb(223,117,47)" fg:x="498" fg:w="113"/><text x="67.0060%" y="335.50">tokio::sync::oneshot::T..</text></g><g><title>core::ops::function::FnOnce::call_once (113 samples, 15.15%)</title><rect x="66.7560%" y="309" width="15.1475%" height="15" fill="rgb(244,107,35)" fg:x="498" fg:w="113"/><text x="67.0060%" y="319.50">core::ops::function::Fn..</text></g><g><title>core::task::wake::Waker::wake_by_ref (113 samples, 15.15%)</title><rect x="66.7560%" y="293" width="15.1475%" height="15" fill="rgb(205,140,8)" fg:x="498" fg:w="113"/><text x="67.0060%" y="303.50">core::task::wake::Waker..</text></g><g><title>tokio::runtime::park::Inner::unpark (1 samples, 0.13%)</title><rect x="81.7694%" y="277" width="0.1340%" height="15" fill="rgb(228,84,46)" fg:x="610" fg:w="1"/><text x="82.0194%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (1 samples, 0.13%)</title><rect x="81.7694%" y="261" width="0.1340%" height="15" fill="rgb(254,188,9)" fg:x="610" fg:w="1"/><text x="82.0194%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.13%)</title><rect x="81.7694%" y="245" width="0.1340%" height="15" fill="rgb(206,112,54)" fg:x="610" fg:w="1"/><text x="82.0194%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_poll (1 samples, 0.13%)</title><rect x="81.9035%" y="677" width="0.1340%" height="15" fill="rgb(216,84,49)" fg:x="611" fg:w="1"/><text x="82.1535%" y="687.50"></text></g><g><title>syscall (85 samples, 11.39%)</title><rect x="82.0375%" y="629" width="11.3941%" height="15" fill="rgb(214,194,35)" fg:x="612" fg:w="85"/><text x="82.2875%" y="639.50">syscall</text></g><g><title>all (746 samples, 100%)</title><rect x="0.0000%" y="1365" width="100.0000%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="746"/><text x="0.2500%" y="1375.50"></text></g><g><title>tokio-runtime-w (534 samples, 71.58%)</title><rect x="28.4182%" y="1349" width="71.5818%" height="15" fill="rgb(222,56,52)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1359.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (534 samples, 71.58%)</title><rect x="28.4182%" y="1333" width="71.5818%" height="15" fill="rgb(245,217,50)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1343.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (534 samples, 71.58%)</title><rect x="28.4182%" y="1317" width="71.5818%" height="15" fill="rgb(213,201,24)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1327.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (534 samples, 71.58%)</title><rect x="28.4182%" y="1301" width="71.5818%" height="15" fill="rgb(248,116,28)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1311.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (534 samples, 71.58%)</title><rect x="28.4182%" y="1285" width="71.5818%" height="15" fill="rgb(219,72,43)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1295.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="1269" width="71.5818%" height="15" fill="rgb(209,138,14)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1279.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (534 samples, 71.58%)</title><rect x="28.4182%" y="1253" width="71.5818%" height="15" fill="rgb(222,18,33)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1263.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (534 samples, 71.58%)</title><rect x="28.4182%" y="1237" width="71.5818%" height="15" fill="rgb(213,199,7)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1247.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (534 samples, 71.58%)</title><rect x="28.4182%" y="1221" width="71.5818%" height="15" fill="rgb(250,110,10)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1231.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (534 samples, 71.58%)</title><rect x="28.4182%" y="1205" width="71.5818%" height="15" fill="rgb(248,123,6)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1215.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="1189" width="71.5818%" height="15" fill="rgb(206,91,31)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1199.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (534 samples, 71.58%)</title><rect x="28.4182%" y="1173" width="71.5818%" height="15" fill="rgb(211,154,13)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1183.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="1157" width="71.5818%" height="15" fill="rgb(225,148,7)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1167.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (534 samples, 71.58%)</title><rect x="28.4182%" y="1141" width="71.5818%" height="15" fill="rgb(220,160,43)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1151.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (534 samples, 71.58%)</title><rect x="28.4182%" y="1125" width="71.5818%" height="15" fill="rgb(213,52,39)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1135.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (534 samples, 71.58%)</title><rect x="28.4182%" y="1109" width="71.5818%" height="15" fill="rgb(243,137,7)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1119.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (534 samples, 71.58%)</title><rect x="28.4182%" y="1093" width="71.5818%" height="15" fill="rgb(230,79,13)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1103.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (534 samples, 71.58%)</title><rect x="28.4182%" y="1077" width="71.5818%" height="15" fill="rgb(247,105,23)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1087.50">tokio::runtime::task::raw::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (534 samples, 71.58%)</title><rect x="28.4182%" y="1061" width="71.5818%" height="15" fill="rgb(223,179,41)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1071.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (534 samples, 71.58%)</title><rect x="28.4182%" y="1045" width="71.5818%" height="15" fill="rgb(218,9,34)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1055.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (534 samples, 71.58%)</title><rect x="28.4182%" y="1029" width="71.5818%" height="15" fill="rgb(222,106,8)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1039.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (534 samples, 71.58%)</title><rect x="28.4182%" y="1013" width="71.5818%" height="15" fill="rgb(211,220,0)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (534 samples, 71.58%)</title><rect x="28.4182%" y="997" width="71.5818%" height="15" fill="rgb(229,52,16)" fg:x="212" fg:w="534"/><text x="28.6682%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (534 samples, 71.58%)</title><rect x="28.4182%" y="981" width="71.5818%" height="15" fill="rgb(212,155,18)" fg:x="212" fg:w="534"/><text x="28.6682%" y="991.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (534 samples, 71.58%)</title><rect x="28.4182%" y="965" width="71.5818%" height="15" fill="rgb(242,21,14)" fg:x="212" fg:w="534"/><text x="28.6682%" y="975.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="949" width="71.5818%" height="15" fill="rgb(222,19,48)" fg:x="212" fg:w="534"/><text x="28.6682%" y="959.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (534 samples, 71.58%)</title><rect x="28.4182%" y="933" width="71.5818%" height="15" fill="rgb(232,45,27)" fg:x="212" fg:w="534"/><text x="28.6682%" y="943.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (534 samples, 71.58%)</title><rect x="28.4182%" y="917" width="71.5818%" height="15" fill="rgb(249,103,42)" fg:x="212" fg:w="534"/><text x="28.6682%" y="927.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="901" width="71.5818%" height="15" fill="rgb(246,81,33)" fg:x="212" fg:w="534"/><text x="28.6682%" y="911.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (534 samples, 71.58%)</title><rect x="28.4182%" y="885" width="71.5818%" height="15" fill="rgb(252,33,42)" fg:x="212" fg:w="534"/><text x="28.6682%" y="895.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="869" width="71.5818%" height="15" fill="rgb(209,212,41)" fg:x="212" fg:w="534"/><text x="28.6682%" y="879.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (534 samples, 71.58%)</title><rect x="28.4182%" y="853" width="71.5818%" height="15" fill="rgb(207,154,6)" fg:x="212" fg:w="534"/><text x="28.6682%" y="863.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (534 samples, 71.58%)</title><rect x="28.4182%" y="837" width="71.5818%" height="15" fill="rgb(223,64,47)" fg:x="212" fg:w="534"/><text x="28.6682%" y="847.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="821" width="71.5818%" height="15" fill="rgb(211,161,38)" fg:x="212" fg:w="534"/><text x="28.6682%" y="831.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::context::set_scheduler (534 samples, 71.58%)</title><rect x="28.4182%" y="805" width="71.5818%" height="15" fill="rgb(219,138,40)" fg:x="212" fg:w="534"/><text x="28.6682%" y="815.50">tokio::runtime::context::set_scheduler</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (534 samples, 71.58%)</title><rect x="28.4182%" y="789" width="71.5818%" height="15" fill="rgb(241,228,46)" fg:x="212" fg:w="534"/><text x="28.6682%" y="799.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (534 samples, 71.58%)</title><rect x="28.4182%" y="773" width="71.5818%" height="15" fill="rgb(223,209,38)" fg:x="212" fg:w="534"/><text x="28.6682%" y="783.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="757" width="71.5818%" height="15" fill="rgb(236,164,45)" fg:x="212" fg:w="534"/><text x="28.6682%" y="767.50">tokio::runtime::context::set_scheduler::{{closure}}</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (534 samples, 71.58%)</title><rect x="28.4182%" y="741" width="71.5818%" height="15" fill="rgb(231,15,5)" fg:x="212" fg:w="534"/><text x="28.6682%" y="751.50">tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}} (534 samples, 71.58%)</title><rect x="28.4182%" y="725" width="71.5818%" height="15" fill="rgb(252,35,15)" fg:x="212" fg:w="534"/><text x="28.6682%" y="735.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (534 samples, 71.58%)</title><rect x="28.4182%" y="709" width="71.5818%" height="15" fill="rgb(248,181,18)" fg:x="212" fg:w="534"/><text x="28.6682%" y="719.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (307 samples, 41.15%)</title><rect x="58.8472%" y="693" width="41.1528%" height="15" fill="rgb(233,39,42)" fg:x="439" fg:w="307"/><text x="59.0972%" y="703.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (134 samples, 17.96%)</title><rect x="82.0375%" y="677" width="17.9625%" height="15" fill="rgb(238,110,33)" fg:x="612" fg:w="134"/><text x="82.2875%" y="687.50">tokio::runtime::scheduler::m..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (134 samples, 17.96%)</title><rect x="82.0375%" y="661" width="17.9625%" height="15" fill="rgb(233,195,10)" fg:x="612" fg:w="134"/><text x="82.2875%" y="671.50">tokio::runtime::scheduler::m..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (134 samples, 17.96%)</title><rect x="82.0375%" y="645" width="17.9625%" height="15" fill="rgb(254,105,3)" fg:x="612" fg:w="134"/><text x="82.2875%" y="655.50">tokio::runtime::scheduler::m..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (49 samples, 6.57%)</title><rect x="93.4316%" y="629" width="6.5684%" height="15" fill="rgb(221,225,9)" fg:x="697" fg:w="49"/><text x="93.6816%" y="639.50">tokio::ru..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (49 samples, 6.57%)</title><rect x="93.4316%" y="613" width="6.5684%" height="15" fill="rgb(224,227,45)" fg:x="697" fg:w="49"/><text x="93.6816%" y="623.50">tokio::ru..</text></g><g><title>tokio::runtime::driver::Handle::unpark (49 samples, 6.57%)</title><rect x="93.4316%" y="597" width="6.5684%" height="15" fill="rgb(229,198,43)" fg:x="697" fg:w="49"/><text x="93.6816%" y="607.50">tokio::ru..</text></g><g><title>tokio::runtime::driver::IoHandle::unpark (49 samples, 6.57%)</title><rect x="93.4316%" y="581" width="6.5684%" height="15" fill="rgb(206,209,35)" fg:x="697" fg:w="49"/><text x="93.6816%" y="591.50">tokio::ru..</text></g><g><title>tokio::runtime::io::driver::Handle::unpark (49 samples, 6.57%)</title><rect x="93.4316%" y="565" width="6.5684%" height="15" fill="rgb(245,195,53)" fg:x="697" fg:w="49"/><text x="93.6816%" y="575.50">tokio::ru..</text></g><g><title>mio::waker::Waker::wake (49 samples, 6.57%)</title><rect x="93.4316%" y="549" width="6.5684%" height="15" fill="rgb(240,92,26)" fg:x="697" fg:w="49"/><text x="93.6816%" y="559.50">mio::wake..</text></g><g><title>mio::sys::unix::waker::Waker::wake (49 samples, 6.57%)</title><rect x="93.4316%" y="533" width="6.5684%" height="15" fill="rgb(207,40,23)" fg:x="697" fg:w="49"/><text x="93.6816%" y="543.50">mio::sys:..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (49 samples, 6.57%)</title><rect x="93.4316%" y="517" width="6.5684%" height="15" fill="rgb(223,111,35)" fg:x="697" fg:w="49"/><text x="93.6816%" y="527.50">&lt;&amp;std::fs..</text></g><g><title>std::sys::pal::unix::fs::File::write (49 samples, 6.57%)</title><rect x="93.4316%" y="501" width="6.5684%" height="15" fill="rgb(229,147,28)" fg:x="697" fg:w="49"/><text x="93.6816%" y="511.50">std::sys:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (49 samples, 6.57%)</title><rect x="93.4316%" y="485" width="6.5684%" height="15" fill="rgb(211,29,28)" fg:x="697" fg:w="49"/><text x="93.6816%" y="495.50">std::sys:..</text></g><g><title>write (49 samples, 6.57%)</title><rect x="93.4316%" y="469" width="6.5684%" height="15" fill="rgb(228,72,33)" fg:x="697" fg:w="49"/><text x="93.6816%" y="479.50">write</text></g></svg></svg>